{
  "id": "7HJCa-pHfSQ",
  "title": "The Future of Notebooks - with Akshay Agrawal of Marimo",
  "channelId": "UCxBcwypKK-W3GHd_RZ9FZrQ",
  "publishedAt": "2025-07-18T13:00:18.000Z",
  "cleanText": "Hey everyone, welcome back to another latest space lightning pod.\nThis is Allesio, partner and CTO at Decibel, and today I have Akshay Agrawal from Marimo on the studio.\nWelcome.\nThanks Allesio.\nReally happy to be here.\nYeah.\nUh, thanks to Samuel Calvin from Pantic for the introduction.\nYou know, we saw him at the AI engineer summit in New York and he was like, you should have you should have these guys on on the pod.\nSo, um, and we've had previously, you know, Brian Bishop from Hack, who's now at TRVC.\nSo we cover notebooks in the past, and I think there's now a resurgence of AI plus previous data you access.\nWe have a quadratic episode on the spreadsheet side.\nSo welcome to the show and maybe give people an introduction on Marimo and what you guys do.\nYeah, definitely.\nSo Marimo is an open-source notebook for Python that's built entirely from scratch.\nSo it has no dependencies on Jupyter, and it's designed specifically for AI and data work.\nSo some of the main things that are different from like traditional notebooks is Marimo has like reactive execution.\nSo you run a cell, Marimo knows what other cells need to run and also has built-in UI elements.\nLike the upshot of these things is that it lets you work with data and AI models in entirely new ways.\nAnd it like really puts your data front and center in a way that sort of you don't see in in traditional notebooks.\nAnd these things are a lot easier to demo.\nSo, we'll jump into a few demos in a bit.\nBut, I guess a couple other things I'll say about Marimo and sort of the things that are um fueling sort of the the strong traction that we're seeing is that um not only are they really good for rapid prototyping, they also let you go from prototype to production.\nSo, they're stored as pure Python.\nSo you can version them with Git, you can share them as data apps, you can execute them as scripts or pipeline.\nUh, you can they have SQL built in and you can connect to your own databases or data links.\nSo you can think of it as a modern replacement for not only Jupyter but also Streamlit, Radio, Paper Mill, and yeah, so we are seeing pretty strong traction this year.\nI think last I checked over 300,000 monthly downloads on Pi, more GitHub stars than Jupyter Notebook for whatever that's worth, and we're used at companies like OpenAI, Hugging Face, Cloudflare, BlackRock, universities like Stanford and Berkeley.\nThat's the high-level overview.\nYeah.\nHow did you decide on the notebook shape?\nI think there's many critiques of Jupyter notebooks from the kernel and like the way it interacts with AI models and ideas.\nWhat was kind of like the initial idea maze that got you here?\nYeah.\nSo I started working on Marimo after, so I was at Google Brain.\nIt was a while ago, but I was an engineer on TensorFlow, and then after that I did a PhD at Stanford in machine learning research.\nAnd you know, one thing I noticed and even for myself too is that like people have a lot of complaints about Jupyter notebooks, and you know, I did too, which is sort of why I'm working on Marimo today.\nBut at the same time, they provided something that was really invaluable for people who work with data and AI, which is the ability to write code and like interact with the output of the code, interact with your data in an iterative way.\nAnd I think one thing that's constant, like, you know, back then it was machine learning.\nNow it's more generative AI.\nThe thing that's that has been true is that you got to look at your data, and notebooks are like really good for that, even though they they have traditionally had like a lot of problem other problems like hidden state, reproducibility issues, the file format making it, you know, unable to version with Git.\nSo after finishing my PhD, I noticed that look, I not only does a lot of data work start in notebooks, you know, with you know, the rise of AI.\nSo at that time, that was end of 2021, so ChatGPT, you know, was just bursting onto the scene.\nI think it became clear clear to me that people were going to spend even more time working with data, evaluating model outputs and stuff.\nSo I thought I wanted to design something that kept the interactivity that that notebooks are really great for, but that had sort of the guardrails that like regular software has, like reproducibility, no hidden state.\nYou can actually reuse your notebooks as apps, as as scripts, and yeah, so that that's sort of that was the genesis of the idea.\nCool.\nYeah, let's jump into a demo.\nI think that you know most of the audience is technical, so feel free to um keep it engineering focused.\nAwesome.\nSo let me share my screen.\nCool.\nSo I can share a few demos.\nSo this is an example of a Marimo notebook.\nYou have cells of Python code.\nYou have some markdown and then you have some visual outputs.\nSo this is we're going to start with classical machine learning with MNIST data set and then we'll go to some generative AI applications.\nSo over here we're looking at a a scatter plot of a a 2D embedding of MNIST, which is a data set of numerical digits.\nAnd so each different color in this scatter plot corresponds to a different digit.\nSo one thing that is immediately different between how a Jupyter notebook works and a Marimo notebook works is that this notebook is going to react to my UI interactions and also my code interactions.\nSo what I'm going to do here is I'm going to hide the code.\nI'm going to click this button and then I get a app at app view sort of of my notebook.\nOne thing that I can do is that I can actually make a selection in the scatter plot.\nAnd as I make this, you can see down below I'm getting a live preview of the underlying images that have been embedded into 2D.\nAnd workflows like this are like one I think really important whenever you work with data, like you actually really need to see your data and two like very painful to like get working in traditional notebooks that are sort of based on Jupyter.\nAnd in contrast, like if you look at the code for this notebook, it's really quite simple, just a few lines of code, you create an Altair chart and then you just wrap it in one special Marimo function and that that makes this thing totally interactive.\nAnd then what's happening behind the scenes is that I have this chart object.\nIt has a value property and that value is just the data that's been selected.\nSo if I select here, you'll see that the data frame gets sent back to Python and you can see a visualization of it.\nAnd then you have downstream code that can manipulate that data in any way.\nAnd so that's what I mean by reactive.\nI interact with a notebook and then Marimo knows how to automatically update outputs.\nAnd this is um one-to-one compatible with notebook.\nSo if I already have a notebook, I can just kind of copy paste the cells over or what's the process almost?\nSo our file format is different.\nBut yeah, you can copy paste the the files over the the cells over or we have a command line utility, Marimo convert my notebook.ipynb to my notebook.py and it'll do the conversion.\nThere are there are some restrictions on the kind of code that Marimo lets you write.\nBecause Marimo does have a dependency graph basically on your cells.\nThat's how it knows what cells to run.\nYou can't redefine variables across multiple cells.\nBut our conversion tool will fix that up for you.\nAnd we have things like local variables and other things that sort of make that work.\nYeah.\nUm, awesome.\nYeah.\nAnd so I have these other little UI widgets here.\nI can click this widget, for example, and it changes the embedding again, like if you were doing this in a Jupyter notebook, you would probably have copy pasted the all like six cells like multiple times and then you wouldn't even have the sort of drill down interactivity.\nSo that that's one way uh that Marimo brings data to life in sort of a more classical sort of machine learning context.\nCan look at another demo.\nThis one is pretty fun.\nIt was made by Vincent Warmerdom, who is Marimo Mo's resident creative genius.\nAnd so this one, okay, so if you're looking at this, first thing you might notice is, okay, wait a minute.\nNotebooks are traditionally linear.\nYou're looking at some columns here on the screen.\nWe have three columns of code and outputs.\nUm, Marimo's actually pretty flexible in like the way you can arrange your code.\nAnd we recognize that like, hey, monitors are wide and you might want to use that screen real estate.\nSo you can configure it to show things in columns and the way that the order of execution works is just based on variable declarations and references kind of like Excel in some sense, right?\nYou can have columns, things just kind of execute in the right way.\nSo this notebook is is kind of fun.\nSo what we have here, we have a few cells.\nWe have a little custom widget that Vincent Vibe coded.\nIt's Microsoft Paint in a Marimo notebook.\nAnd so what I'm going to do here is I'm going to draw in this widget.\nAnd first thing you see as I'm drawing, my image is being rendered here on the right and that's based on that reactivity.\nI'm going to draw a little graph.\nAnd then this graph is going to be used as part of the input to a query that I'm going to make to a multimodal model.\nAnd I'll ask Gemini to give me a representation as a mermaid.\nOkay, there we go.\nSo, I have the markdown code for the mermaid graph.\nAnd like this is the kind of thing that you really don't think if you think Jupyter Notebook, you don't envision yourself being able to make workflows like this for yourself.\nBut like, so I I I hope like a demo like this shows like how Marimo really makes you rethink what a notebook can do and really sort of brings your data to to life in new ways.\nDo do you have any kind of like AI native utilities to call these models or are people just writing like all the API calling code or do you think that's kind of like an interesting direction?\nYeah.\nSo we do have some AI native capabilities to write these uh call these models.\nSo I guess it's in a couple of modalities.\nSo right now this notebook is just calling the client API.\nIf you want to, you can just generate code.\nSo speaking of um a recent podcast that y'all did for on quadratic, the AI spreadsheet, you know, there we saw a lot that you could use natural language to generate code and actually Marimo lets you do similar things.\nSo like I could there's a generate with AI button here at the bottom right.\nSo I could write some code.\nI can tag data frames and other things that I have.\nAnd uh I'm actually not sure what I want to ask it to to show here, but I could say, you know, create mapp plot of a sign curve.\nAnd I can just do that.\nI'm missing some packages here that I'll need to install.\nAnd then we can try again.\nYeah.\nHow do you do all the packaging?\nIs it there's like a requirements .txt file just like you would in uh actually scriptor.\nYeah, it's a little cooler actually than that.\nSo see this time.\nSo one thing that you'll notice that when I tried to run that generate with AI code button and I didn't have a package installed, there was like a little toast that like say, hey, we can install this package for you and it just kind of did it.\nSo we actually have a tight integration with um the UV package manager from Astral.\nSo we can actually store dependencies in line in the notebook file itself in like the notebook header and this is something that UV supports.\nSo then you can just actually ship a notebook file around and it contains all its dependencies.\nThat's like kind of opt in, but that's one way thing that like really makes notebooks a lot more reproducible.\nAnd so we'll see again, we don't have the packages, but I can install them and then there we go, they're installed, the cell reran and I have sort of my output.\nYeah.\nSo when you're asking AI to generate any AI generated cell can kind of like doesn't have to think about the broader requirements of the project.\nYeah, that's right.\nYes.\nAnd the AI has context to sort of like all all the data frames, all the variables that you already have imported into your notebook as well.\nBut yeah, it can it can readily use other modules and we'll just sort of do the right thing.\nI have another fun demo also made by the one and only Vincent Warmer that I kind of want to show.\nAnd this is a a demo sort of in the vein of bringing sort of data to life and like really working with your data.\nThis is like a data annotation demo.\nAnd one thing that you'll notice actually, so in my hands here, I've got a PS5 controller.\nYeah.\nAnd you'll see this little thing here, moped widget, and it says gamepad connected.\nAnd I'm moving around my mouse, and you see some like inputs changing here.\nAnd so like to really drive home how interactive Marimo is and like how many different ways we can use to sort of interact, like not only can you use your mouse to change UI interactions, you can build custom extensions to control your the applications you make in a Marimo notebook with anything including a PS5 controller.\nSo this demo here we have like a bunch of papers from archive and we've indexed them using Chroma into like a basic vector database and now what we're going to do is we're going to make a query to get a bunch of papers related to data quality and there's two embedding models and the goal is to compare like which embedding model do we prefer.\nSo the embedding model embeds the query and then you know, uses vector search to pull related papers.\nSo if I submit this, I get a a summary of the paper.\nIn this case, it says we provide an overview of the standard data resources for training multilingual reasoning and out language models.\nThat seems sort of related to data quality.\nSo I'm going to accept this.\nAnd I could accept by clicking this button, but I can also accept it by pushing X on the gamepad.\nSo I push X.\nOh, we have more fun.\nYeah, you see that goes through.\nYou see that I have this editable data frame thing here that shows me the the annotation result.\nAnd I can just keep going.\nI don't know.\nThis one also seems sort of related to data quality.\nSo maybe I'll say accept.\nThis doesn't seem as related.\nSo I'll say reject.\nAnd what's happening over here is that I'm plotting the beta distribution of the two models to sort of get a belief of which model is better.\nAnd I can just kind of jam this quite quickly in a way that, you know, would be really annoying if I were using my mouse and I would just quickly get carpal tunnel syndrome.\nSo another way that like Marimo really brings your data to life and really makes makes your work a lot more interactive than\n\n\nIt might be otherwise.\nThat's great.\nCan we maybe talk about the blank canvas AI use cases?\nSo, you know, I want to do some data analysis.\nYeah, I like the notebook like UI.\nHow do I start from scratch?\nYeah, that that's actually perfectly teed up.\nThat was the next demo.\nSo, this is how you start from scratch.\nThis is an empty notebook.\nI can zoom in a bit.\nAnd so, there is a code cell and there's this generate with AI button.\nSo to get started, I will just like populate this with some data.\nUm, and I'm going to use Vega data sets.\nI'm going to import a data frame about cars.\nOkay, so I have a data frame and I'm say I'm kind of new to polar.\nI don't really know the syntax, but I kind of know what I want to do.\nSo you can click this generate with AI button and you can just start typing.\nSo maybe the first thing I want to do is get a histogram maybe of one of these columns.\nIt's just so I can see it sort of in more detail.\nSo I can say something like generate a histogram of miles per gallon maybe from and then I can give the data frame as context to to whatever model I have connected.\nSo I can just tag it with at.\nAnd you'll see here that if I write tag at df, it actually is going to pass in all these columns and their data types as context to the to the language model.\nIf I do that, I hit enter, it's going to turn a little bit, generate some code, I can edit it a little bit uh to sort of clean it up.\nDon't need to convert it to pandas.\nThen I can accept and just run it.\nAnd then boom.\nSo you have your you have your code.\nAnd so that that kind of really accelerates rapid prototyping and you don't really have to leave your tab and go to check GPT.\nYou can just do it entirely in here and you can like just sort of vibe code your way through your entire analysis in this way.\nAnd I guess like one thing that's kind of interesting to talk about that maybe is kind of subtle but like if you think about doing something like this um I don't know in cursor or chatgpt or something like this.\nWhat's unique about doing it in Mimo is the fact that not only does Mimo see your code but it sees all the variables in memory and it can also see your database connections etc.\nSo it can really provide rich rich completions.\nSo like it knows the name of the columns for example.\nOh, how are you doing the context formatting?\nLike when you do add df how are you showing that to the to the model when you send it over?\nWe like basically I think we do like df.head to just like get like a preview of the columns, the data types and then like a few sample rows and just kind of shove that into the context window.\nYeah.\nSo let's see.\nI can ask like another query like maybe I can say something like so this data set has cars by a bunch of different countries as well and maybe I want to understand sort of average statistics by country of cars like are US cars more efficient or less efficient than cars from Japan etc.\nSo I can say something like let me understand uh average statistics for for DF across origin column which is the country and then boom it starts writing again.\nAnd what's kind of cool is that you'll see it knows all the column names here.\nAnd then again, I can fix up the code a little except try it out.\nAnd there it is.\nUm, a lot faster than going to to the API docs.\nAnd we have other workflows too for for working with AI.\nSo you can also there's like a chat bar here where if you don't necessarily if you want to sort of have a multi-turn conversation, you can execute it here as well.\nAnd you we have a bring your own keys model.\nSo right now I'm using an open AI key, but you can also use local models with O Lama or anything you like really.\nSorry for jumping in late here.\nI think you probably guys Yeah, you guys probably discussed this earlier.\nUh but this is all running in WebAssembly, right?\nUm actually not ex not entirely.\nMimo's actually this is running just on my laptop, but we can run WebAssembly.\nSo I guess similar to a Jupyter notebook, Mimo is an open-source package that you can just install and run wherever you like.\nSo pip install Mimo, run it on your laptop, run on a cloud server, wherever you like.\nBut to make Mimo really easy to share, we've also made it possible to run it entirely in WebAssembly.\nSo actually, if you go to new, this opens a little notebook playground in your browser.\nAnd this is running entirely in WebAssembly.\nSo you can just\nYeah.\nI was I was just kind of curious if there's any part of the Python ecosystem that you know is not compatible with this.\nI I'm not aware of what the restrictions are.\nYeah.\nNo, so that's a great question.\nSo if you're using Mimo just the local library on your laptop on the cloud server, you can use any item package you want.\nIf you're using it in WebAssembly, so for example in this playground, there are restrictions.\nSo you try to import torch, it's not going to work.\nIt's not going to be able to install it.\nBut there are certain packages that just don't work.\nAnd actually for that reason, so whereas I I think the WebAssembly really like democratizes interactive computing to a large extent, it doesn't totally.\nSo for that reason, our team has actually been really hard at work building a cloud hosted collab like uh notebook that we're going to give away to our community for free.\nand we're calling it MoLab.\nThis is like a preview of the page and great name.\nYeah, it's a it's a funny story.\nSo, Mo from Mimo.\nUm, and it's at moab.marimo.\nIt's a pretty simple service.\nYou can create a new notebook.\nYou can import a notebook locally or from GitHub.\nAnd these run in cloud instances.\nCurrently, they're running on modal.\nAnd so here you can use any package you like.\nYou can have configurable CPU and RAM.\nYou can also upload your own data and we store them in Cloudflare R2 buckets.\nYou know the name.\nI mean one thing that's actually kind of funny for the origin story of this is that a lot of our users were asking us for something like Collab based on Mimo.\nActually, if you go to Google Collabs GitHub issues page, um they have one and sort by thumbs up.\nWe are like I guess the sixth or seventh most upvoted issue.\nSupport Mimo in Google Collab.\nAnd I don't think Google was ever going to do that anytime soon.\nSo, we decided to kind of just do something like that on our own.\nSo, that's sort of the origin for where Moab came from.\nYeah, it's a funny the issue was opened in June of last year as one of our users who we've communicated with over at GitHub for for some time.\nUm, yeah, amazing.\nWhat's kind of like missing here in your mind as you think about other things that you want to add to it like features or like maybe trying to break out of old habits?\nI think you've done a great job of keeping the familiarity of like cellbased execution but adding things like column and things like that.\nUm yeah, what do you what do you think is next?\nYeah.\nSo a bunch of there could be a bunch of things.\nSo in terms of like breaking out of old habits, you know, we talked a little bit about how Marimo has some restrictions on the kind of codes you code you write and actually that ends up leading to much better code is you can't reuse you can't redefine variables.\nYou kind of have to write things in a functional way.\nSo so in that sense it does sort of break some old maybe bad habits.\nOne of our users called this gentle parenting.\nUm, and another way of breaking out of the notebook that that we actually do have.\nSo, I mentioned notebooks are stored as pure Python.\nSo, if I go uh let's I can open a notebook file and we can take a look at what it actually looks like.\nOops.\nYou'll see has a py extension embedding mnest py.\nI'm going to zoom in and you'll see it's just pure Python.\nAnd this is generated for the user but you can also edit it yourself.\nEvery cell is decorated in app.ell decorator and there is an app.run sort of at the bottom which suggests you can run this as a script and like indeed you can.\nSo if I go to my terminal and I can just use uvun embedding mnest.py.\nIt just starts executing as a script.\nit loaded a cache data set did some other stuff that didn't print to to the terminal.\nSo that's that's one way that we help folks break out of a notebooking workflow.\nThe other way is you can actually run any Mimo notebook as a data app uh similar to streamlit.\nSo I can say Mimo run embedding mnest.p\nAnd then it it'll run it as a readonly web app in my browser that you can also deploy and share with other other users or you know maybe non-technical folks.\nDo you see a world in which you made this right too?\nSo the when I meant read only it just means that the the consumer of the app can't change the code but yeah you can have like you can write to databases from the application and things like that.\nSo definitely you can have right back.\nYeah.\nUm yeah, other things that we're working on besides MoLab, we do talk about improving like going further with the AI assistance that we have.\nYou know, agents are obviously sort of a natural thing to to think about.\nThere's actually a really cool project by a PhD student at Stanford where they uh they worked in genomics and they actually forked Mimo.\nThey have a project called Mimo agents and they added a new type of cell an agent cell where you can type English and then it kicks off an agent that generates your Python code and then adds it to your notebook and then you have a record of the prompt.\nSo things like that we're looking into exploring too.\nNice.\nUm awesome.\nI thought this was great.\nany call to action for folks?\nAre you hiring?\nAre you looking for obviously more users?\nUh, anything?\nYeah, we're always looking for more users.\nSo, if you want to try Mimo, easiest way to get started on your own machine is to pip install it and then just write Mimo tutorial intro.\nPip install Mimo.\nMarimo tutorial intro will get you get you going.\nTry out MoLab if you want a cloud hosted experience of being able to use any package sharing notebooks with links like just like you would with collab.\nSo that will be at moab.marimo.\nOtherwise we love contributors.\nWe have over 100 open source contributors.\nCome follow us on socials.\nWe're mimo_io on Twitter.\nI think this this mission is great and know I think notebooks are still underrated by a lot of people and like requires a dedicated team with like a strong vision like you have to reinvent one of the core workflows of most uh research scientists and engineers.\nAppreciate it.\nAwesome actually.\nThank you so much.\nThank you guys.\n[Music]\n",
  "metadata": {
    "summary": "In this episode, Akshay Agrawal introduces Marimo, an open-source Python notebook designed to revolutionize data analysis and AI workflows. He details Marimo's unique features, including reactive execution, seamless integration with AI models, and dependency management. Agrawal showcases demos, such as classical machine learning with MNIST and interactive notebooks with custom UIs. He emphasizes Marimo's capabilities in AI-driven code generation, data annotation, and its potential to replace tools like Jupyter and Streamlit. The discussion covers Marimo's architecture, including WebAssembly support, cloud-hosted notebooks, and future plans to transform how users interact with data and AI.",
    "topClaims": [
      {
        "text": "Marimo is an open-source notebook for Python that's built entirely from scratch and has no dependencies on Jupyter.",
        "rating": 8.5,
        "chunkId": "ck-7HJCa-pHfSQ-0"
      },
      {
        "text": "Marimo is a modern replacement for Jupyter, Streamlit, Radio, and Paper Mill.",
        "rating": 7.8,
        "chunkId": "ck-7HJCa-pHfSQ-1"
      },
      {
        "text": "I wanted to design something that kept the interactivity that notebooks are really great for.",
        "rating": 8,
        "chunkId": "ck-7HJCa-pHfSQ-4"
      },
      {
        "text": "I hope a demo like this shows how Marimo really makes you rethink what a notebook can do and brings your data to life.",
        "rating": 7.5,
        "chunkId": "ck-7HJCa-pHfSQ-10"
      }
    ],
    "topQuotes": [
      {
        "text": "So Marimo is an open-source notebook for Python that's built entirely from scratch. (chunkId: ck-7HJCa-pHfSQ-0, chunkNum: 0)",
        "chunkId": "ck-7HJCa-pHfSQ-0",
        "chunkNum": 0,
        "relevance": 9.5,
        "interesting": 9.2
      },
      {
        "text": "So you can think of it as a modern replacement for not only Jupyter but also Streamlit, Radio, Paper Mill (chunkId: ck-7HJCa-pHfSQ-1, chunkNum: 1)",
        "chunkId": "ck-7HJCa-pHfSQ-1",
        "chunkNum": 1,
        "relevance": 8.9,
        "interesting": 8.8
      },
      {
        "text": "I think it became clear clear to me that people were going to spend even more time working with data. (chunkId: ck-7HJCa-pHfSQ-4, chunkNum: 4)",
        "chunkId": "ck-7HJCa-pHfSQ-4",
        "chunkNum": 4,
        "relevance": 7.8,
        "interesting": 7.5
      },
      {
        "text": "I can click this widget, for example, and it changes the embedding again, like if you were doing this in a Jupyter notebook. (chunkId: ck-7HJCa-pHfSQ-8, chunkNum: 8)",
        "chunkId": "ck-7HJCa-pHfSQ-8",
        "chunkNum": 8,
        "relevance": 8.2,
        "interesting": 8
      },
      {
        "text": "I can accept by clicking this button, but I can also accept it by pushing X on the gamepad. (chunkId: ck-7HJCa-pHfSQ-14, chunkNum: 14)",
        "chunkId": "ck-7HJCa-pHfSQ-14",
        "chunkNum": 14,
        "relevance": 8.1,
        "interesting": 7.9
      }
    ],
    "topTopics": [
      {
        "name": "marimo notebook",
        "count": 10,
        "description": "An open-source notebook for Python."
      },
      {
        "name": "notebook interactivity",
        "count": 6,
        "description": "The interactive features of notebooks."
      },
      {
        "name": "ai code generation",
        "count": 5,
        "description": "Using AI models within notebooks."
      },
      {
        "name": "notebook conversion",
        "count": 4,
        "description": "The process of converting notebooks."
      },
      {
        "name": "webassembly support",
        "count": 3,
        "description": "The use of WebAssembly in notebooks."
      }
    ],
    "videoInfo": {
      "id": "7HJCa-pHfSQ",
      "etag": "plWFN4f0O97hZWOxieWFDRLanzI",
      "kind": "youtube#video",
      "snippet": {
        "title": "The Future of Notebooks - with Akshay Agrawal of Marimo",
        "channelId": "UCxBcwypKK-W3GHd_RZ9FZrQ",
        "localized": {
          "title": "The Future of Notebooks - with Akshay Agrawal of Marimo",
          "description": "Akshay Agrawal joins us to talk about Marimo and their vision for the future of Python notebooks, and how it’s the perfect canvas for AI-driven data analysis.\n\n\n\n0:00 Introduction\n0:46 Overview of Marimo and Its Features\n2:33 Origin Story and Motivation Behind Marimo\n4:26 Demo: Classical Machine Learning with MNIST in Marimo\n6:52 Notebook Compatibility and Conversion from Jupyter\n7:42 Demo: Interactive Notebook with Custom UI and Layout\n10:08 AI-Native Utilities and Code Generation with Language Models\n11:36 Dependency Management and Integration with UV Package Manager\n13:00 Demo: Data Annotation Workflow Using a PS5 Controller\n15:51 Starting from Scratch: Blank Canvas AI Use Cases\n18:27 Context Formatting for AI Code Generation\n19:54 Chat Interface and Local/Remote Model Support\n21:01 WebAssembly Support and MoLab Cloud-Hosted Notebooks\n23:21 Future Plans and Breaking Out of Old Notebook Habits\n25:40 Running Marimo Notebooks as Scripts or Data Apps\n26:44 Exploring AI Agents and Community Contributions\n26:56 Call to Action: How to Get Started and Contribute"
        },
        "categoryId": "28",
        "thumbnails": {
          "high": {
            "url": "https://i.ytimg.com/vi/7HJCa-pHfSQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/7HJCa-pHfSQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/7HJCa-pHfSQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "default": {
            "url": "https://i.ytimg.com/vi/7HJCa-pHfSQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/7HJCa-pHfSQ/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "description": "Akshay Agrawal joins us to talk about Marimo and their vision for the future of Python notebooks, and how it’s the perfect canvas for AI-driven data analysis.\n\n\n\n0:00 Introduction\n0:46 Overview of Marimo and Its Features\n2:33 Origin Story and Motivation Behind Marimo\n4:26 Demo: Classical Machine Learning with MNIST in Marimo\n6:52 Notebook Compatibility and Conversion from Jupyter\n7:42 Demo: Interactive Notebook with Custom UI and Layout\n10:08 AI-Native Utilities and Code Generation with Language Models\n11:36 Dependency Management and Integration with UV Package Manager\n13:00 Demo: Data Annotation Workflow Using a PS5 Controller\n15:51 Starting from Scratch: Blank Canvas AI Use Cases\n18:27 Context Formatting for AI Code Generation\n19:54 Chat Interface and Local/Remote Model Support\n21:01 WebAssembly Support and MoLab Cloud-Hosted Notebooks\n23:21 Future Plans and Breaking Out of Old Notebook Habits\n25:40 Running Marimo Notebooks as Scripts or Data Apps\n26:44 Exploring AI Agents and Community Contributions\n26:56 Call to Action: How to Get Started and Contribute",
        "publishedAt": "2025-07-18T13:00:18Z",
        "channelTitle": "Latent Space",
        "liveBroadcastContent": "none"
      },
      "statistics": {
        "likeCount": "2",
        "viewCount": "49",
        "commentCount": "0",
        "favoriteCount": "0"
      },
      "contentDetails": {
        "caption": "false",
        "duration": "PT28M14S",
        "dimension": "2d",
        "definition": "hd",
        "projection": "rectangular",
        "contentRating": {},
        "licensedContent": false
      }
    },
    "checkCount": 1,
    "nodeCounts": [
      {
        "node": "marimo",
        "count": 9
      },
      {
        "node": "notebooks",
        "count": 4
      },
      {
        "node": "jupyter-notebook",
        "count": 4
      },
      {
        "node": "reproducibility",
        "count": 3
      },
      {
        "node": "data-apps",
        "count": 2
      },
      {
        "node": "rapid-prototyping",
        "count": 2
      },
      {
        "node": "code-interaction",
        "count": 2
      },
      {
        "node": "generative-ai",
        "count": 2
      },
      {
        "node": "marimo-notebook",
        "count": 2
      },
      {
        "node": "workflows",
        "count": 2
      },
      {
        "node": "data-visualization",
        "count": 2
      },
      {
        "node": "outputs",
        "count": 2
      },
      {
        "node": "vincent-warmerdom",
        "count": 2
      },
      {
        "node": "generate-code",
        "count": 2
      },
      {
        "node": "generate-with-ai-button",
        "count": 2
      },
      {
        "node": "tag-data-frames",
        "count": 2
      },
      {
        "node": "ps5-controller",
        "count": 2
      },
      {
        "node": "gamepad",
        "count": 2
      },
      {
        "node": "mimo",
        "count": 2
      },
      {
        "node": "webassembly",
        "count": 2
      },
      {
        "node": "ai-engineer-summit",
        "count": 1
      },
      {
        "node": "allesio",
        "count": 1
      },
      {
        "node": "ai-data-work",
        "count": 1
      },
      {
        "node": "ui-elements",
        "count": 1
      },
      {
        "node": "reactive-execution",
        "count": 1
      },
      {
        "node": "samuel-calvin",
        "count": 1
      },
      {
        "node": "akshay-agrawal",
        "count": 1
      },
      {
        "node": "trvc",
        "count": 1
      },
      {
        "node": "ai-models",
        "count": 1
      },
      {
        "node": "data-pipelines",
        "count": 1
      },
      {
        "node": "sql-databases",
        "count": 1
      },
      {
        "node": "jupyter-replacement",
        "count": 1
      },
      {
        "node": "streamlit-replacement",
        "count": 1
      },
      {
        "node": "radio-replacement",
        "count": 1
      },
      {
        "node": "pi-downloads",
        "count": 1
      },
      {
        "node": "github-stars",
        "count": 1
      },
      {
        "node": "ai-model-critiques",
        "count": 1
      },
      {
        "node": "marimo-origin",
        "count": 1
      },
      {
        "node": "google-brain",
        "count": 1
      },
      {
        "node": "tensorflow",
        "count": 1
      },
      {
        "node": "jupyter-complaints",
        "count": 1
      },
      {
        "node": "iterative-data",
        "count": 1
      },
      {
        "node": "chatgpt",
        "count": 1
      },
      {
        "node": "interactivity",
        "count": 1
      },
      {
        "node": "notebooks-as-apps",
        "count": 1
      },
      {
        "node": "python-code",
        "count": 1
      },
      {
        "node": "markdown",
        "count": 1
      },
      {
        "node": "visual-outputs",
        "count": 1
      },
      {
        "node": "engineering-focus",
        "count": 1
      },
      {
        "node": "model-outputs",
        "count": 1
      },
      {
        "node": "classical-machine-learning",
        "count": 1
      },
      {
        "node": "2d-embedding",
        "count": 1
      },
      {
        "node": "mnist-dataset",
        "count": 1
      },
      {
        "node": "ui-interactions",
        "count": 1
      },
      {
        "node": "scatter-plot",
        "count": 1
      },
      {
        "node": "app-view",
        "count": 1
      },
      {
        "node": "live-preview",
        "count": 1
      },
      {
        "node": "altair-chart",
        "count": 1
      },
      {
        "node": "marimo-function",
        "count": 1
      },
      {
        "node": "chart-object",
        "count": 1
      },
      {
        "node": "python",
        "count": 1
      },
      {
        "node": "reactive",
        "count": 1
      },
      {
        "node": "ipynb",
        "count": 1
      },
      {
        "node": "command-line-utility",
        "count": 1
      },
      {
        "node": "dependency-graph",
        "count": 1
      },
      {
        "node": "cells",
        "count": 1
      },
      {
        "node": "code",
        "count": 1
      },
      {
        "node": "conversion-tool",
        "count": 1
      },
      {
        "node": "local-variables",
        "count": 1
      },
      {
        "node": "ui-widgets",
        "count": 1
      },
      {
        "node": "marimo-mo",
        "count": 1
      },
      {
        "node": "drill-down",
        "count": 1
      },
      {
        "node": "variable-declarations",
        "count": 1
      },
      {
        "node": "custom-widget",
        "count": 1
      },
      {
        "node": "microsoft-paint",
        "count": 1
      },
      {
        "node": "vincent-vibe",
        "count": 1
      },
      {
        "node": "reactivity",
        "count": 1
      },
      {
        "node": "multimodal-model",
        "count": 1
      },
      {
        "node": "mermaid-graph",
        "count": 1
      },
      {
        "node": "ai-native-utilities",
        "count": 1
      },
      {
        "node": "api-calling-code",
        "count": 1
      },
      {
        "node": "ai-native-capabilities",
        "count": 1
      },
      {
        "node": "client-api",
        "count": 1
      },
      {
        "node": "ai-spreadsheet",
        "count": 1
      },
      {
        "node": "mapp-plot",
        "count": 1
      },
      {
        "node": "missing-packages",
        "count": 1
      },
      {
        "node": "quadratic-podcast",
        "count": 1
      },
      {
        "node": "packaging",
        "count": 1
      },
      {
        "node": "requirements-txt",
        "count": 1
      },
      {
        "node": "ai-code",
        "count": 1
      },
      {
        "node": "uv-package-manager",
        "count": 1
      },
      {
        "node": "dependencies",
        "count": 1
      },
      {
        "node": "packages",
        "count": 1
      },
      {
        "node": "notebook-file",
        "count": 1
      },
      {
        "node": "ai-generation",
        "count": 1
      },
      {
        "node": "modules",
        "count": 1
      },
      {
        "node": "data-annotation",
        "count": 1
      },
      {
        "node": "moped-widget",
        "count": 1
      },
      {
        "node": "extensions",
        "count": 1
      },
      {
        "node": "chroma",
        "count": 1
      },
      {
        "node": "vector-database",
        "count": 1
      },
      {
        "node": "embedding-models",
        "count": 1
      },
      {
        "node": "language-models",
        "count": 1
      },
      {
        "node": "beta-distribution",
        "count": 1
      },
      {
        "node": "carpal-tunnel-syndrome",
        "count": 1
      },
      {
        "node": "interactive-data",
        "count": 1
      },
      {
        "node": "blank-canvas-ai",
        "count": 1
      },
      {
        "node": "data-analysis",
        "count": 1
      },
      {
        "node": "notebook-ui",
        "count": 1
      },
      {
        "node": "start-scratch",
        "count": 1
      },
      {
        "node": "empty-notebook",
        "count": 1
      },
      {
        "node": "code-cell",
        "count": 1
      },
      {
        "node": "vega-data-sets",
        "count": 1
      },
      {
        "node": "data-frame-cars",
        "count": 1
      },
      {
        "node": "polar-syntax",
        "count": 1
      },
      {
        "node": "ai-button",
        "count": 1
      },
      {
        "node": "histogram-columns",
        "count": 1
      },
      {
        "node": "miles-per-gallon",
        "count": 1
      },
      {
        "node": "pandas",
        "count": 1
      },
      {
        "node": "gpt",
        "count": 1
      },
      {
        "node": "cursor",
        "count": 1
      },
      {
        "node": "variables",
        "count": 1
      },
      {
        "node": "database-connections",
        "count": 1
      },
      {
        "node": "completions",
        "count": 1
      },
      {
        "node": "context-formatting",
        "count": 1
      },
      {
        "node": "df-head",
        "count": 1
      },
      {
        "node": "average-statistics",
        "count": 1
      },
      {
        "node": "cars",
        "count": 1
      },
      {
        "node": "us-cars",
        "count": 1
      },
      {
        "node": "japan-cars",
        "count": 1
      },
      {
        "node": "multi-turn-conversation",
        "count": 1
      },
      {
        "node": "bring-your-own-keys",
        "count": 1
      },
      {
        "node": "open-ai-key",
        "count": 1
      },
      {
        "node": "o-lama",
        "count": 1
      },
      {
        "node": "molab",
        "count": 1
      },
      {
        "node": "cloudflare-r2",
        "count": 1
      },
      {
        "node": "torch",
        "count": 1
      },
      {
        "node": "mimo-agents",
        "count": 1
      },
      {
        "node": "notebooking-workflow",
        "count": 1
      },
      {
        "node": "functional-way",
        "count": 1
      }
    ],
    "topicGroups": {
      "groups": [
        {
          "topics": [
            "jupyter-notebook",
            "data-apps",
            "generative-ai",
            "data-visualization",
            "ai-engineer-summit",
            "ai-data-work",
            "ai-models",
            "data-pipelines",
            "tensorflow",
            "chatgpt",
            "python-code",
            "ai-native-utilities",
            "ai-native-capabilities",
            "ai-spreadsheet",
            "ai-code",
            "chroma"
          ],
          "category": {
            "id": "data-science-and-ai-tools",
            "name": "Data Science and AI Tools",
            "description": "Tools and technologies for data science and AI."
          }
        },
        {
          "topics": [
            "marimo",
            "marimo-notebook",
            "marimo-origin",
            "marimo-function",
            "marimo-mo"
          ],
          "category": {
            "id": "marimo-framework",
            "name": "Marimo Framework",
            "description": "Focusing on the Marimo framework and related concepts."
          }
        },
        {
          "topics": [
            "reproducibility",
            "rapid-prototyping",
            "workflows",
            "webassembly",
            "packaging",
            "requirements-txt",
            "uv-package-manager",
            "dependencies",
            "packages",
            "modules",
            "extensions"
          ],
          "category": {
            "id": "software-engineering",
            "name": "Software Engineering",
            "description": "Topics related to software development and engineering."
          }
        },
        {
          "topics": [
            "code-interaction",
            "ui-elements",
            "ui-interactions",
            "ui-widgets",
            "custom-widget",
            "interactivity",
            "app-view",
            "live-preview",
            "moped-widget"
          ],
          "category": {
            "id": "interactivity-and-ui",
            "name": "Interactivity and UI",
            "description": "Interactivity and user interface elements."
          }
        },
        {
          "topics": [
            "reactive-execution",
            "generate-code",
            "outputs",
            "generate-with-ai-button",
            "code",
            "cells",
            "reactive",
            "local-variables",
            "variable-declarations",
            "api-calling-code",
            "ai-generation"
          ],
          "category": {
            "id": "code-and-execution",
            "name": "Code and Execution",
            "description": "Concepts related to code and its execution."
          }
        },
        {
          "topics": [
            "tag-data-frames",
            "iterative-data",
            "2d-embedding",
            "mnist-dataset",
            "scatter-plot",
            "altair-chart",
            "chart-object",
            "drill-down",
            "data-annotation"
          ],
          "category": {
            "id": "data-and-analysis",
            "name": "Data and Analysis",
            "description": "Data and its manipulation."
          }
        },
        {
          "topics": [
            "notebooks",
            "jupyter-replacement",
            "streamlit-replacement",
            "radio-replacement",
            "notebooks-as-apps",
            "ipynb",
            "notebook-file"
          ],
          "category": {
            "id": "notebooks-and-alternatives",
            "name": "Notebooks and Alternatives",
            "description": "Topics related to notebooks and their alternatives."
          }
        },
        {
          "topics": [
            "model-outputs",
            "ai-model-critiques",
            "multimodal-model"
          ],
          "category": {
            "id": "ai-models-and-outputs",
            "name": "AI Models and Outputs",
            "description": "AI models and their outputs."
          }
        },
        {
          "topics": [
            "generate-code",
            "generate-with-ai-button",
            "ai-code"
          ],
          "category": {
            "id": "code-generation",
            "name": "Code Generation",
            "description": "Tools and techniques for code generation."
          }
        },
        {
          "topics": [
            "vincent-warmerdom",
            "ps5-controller",
            "gamepad",
            "mimo",
            "allesio",
            "samuel-calvin",
            "akshay-agrawal",
            "trvc",
            "pi-downloads",
            "github-stars",
            "google-brain",
            "jupyter-complaints",
            "python",
            "markdown",
            "visual-outputs",
            "engineering-focus",
            "classical-machine-learning",
            "command-line-utility",
            "dependency-graph",
            "conversion-tool",
            "microsoft-paint",
            "vincent-vibe",
            "reactivity",
            "mermaid-graph",
            "client-api",
            "mapp-plot",
            "missing-packages",
            "quadratic-podcast"
          ],
          "category": {
            "id": "miscellaneous",
            "name": "Miscellaneous",
            "description": "Miscellaneous topics and tools."
          }
        }
      ]
    },
    "shortSummary": "Akshay Agrawal of Marimo discusses the future of Python notebooks, highlighting Marimo's features, AI integration, and its potential as a modern replacement for traditional data analysis tools.",
    "lastStoryCheck": "2025-07-18T13:51:56.820Z",
    "storyCheckResults": {
      "missingChunks": [],
      "missingStories": [],
      "totalCategories": 8,
      "totalChunksChecked": 23
    }
  }
}