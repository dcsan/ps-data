{
  "episodeId": "1-cjrEMj_us",
  "channelSlug": "@syntaxfm",
  "title": "9 NEW JavaScript Features in ES2025",
  "publishedAt": "2025-06-18T11:00:02.000Z",
  "rawLines": [
    {
      "lang": "en",
      "text": "ECMAScript is the standard that defines",
      "offset": 0.16,
      "duration": 4.4
    },
    {
      "lang": "en",
      "text": "how the JavaScript language works. It",
      "offset": 2.48,
      "duration": 4.399
    },
    {
      "lang": "en",
      "text": "tells us what features should exist, how",
      "offset": 4.56,
      "duration": 3.84
    },
    {
      "lang": "en",
      "text": "JavaScript should behave in certain",
      "offset": 6.879,
      "duration": 2.961
    },
    {
      "lang": "en",
      "text": "scenarios, what does the syntax look",
      "offset": 8.4,
      "duration": 3.76
    },
    {
      "lang": "en",
      "text": "like. It standardizes all of that. And",
      "offset": 9.84,
      "duration": 4.48
    },
    {
      "lang": "en",
      "text": "every year, the TC39 committee",
      "offset": 12.16,
      "duration": 4
    },
    {
      "lang": "en",
      "text": "introduces a new version of the",
      "offset": 14.32,
      "duration": 4
    },
    {
      "lang": "en",
      "text": "specification that introduces new",
      "offset": 16.16,
      "duration": 4.24
    },
    {
      "lang": "en",
      "text": "features to the language. And this year",
      "offset": 18.32,
      "duration": 3.92
    },
    {
      "lang": "en",
      "text": "is no different. In this video, I'm",
      "offset": 20.4,
      "duration": 3.28
    },
    {
      "lang": "en",
      "text": "going to walk you through the nine new",
      "offset": 22.24,
      "duration": 2.64
    },
    {
      "lang": "en",
      "text": "features that have been added to",
      "offset": 23.68,
      "duration": 4.16
    },
    {
      "lang": "en",
      "text": "ECMAScript for the 2025 release of the",
      "offset": 24.88,
      "duration": 4.719
    },
    {
      "lang": "en",
      "text": "standard. If that sounds good to you,",
      "offset": 27.84,
      "duration": 3.92
    },
    {
      "lang": "en",
      "text": "let's dive in. My name is CJ. Welcome to",
      "offset": 29.599,
      "duration": 4.471
    },
    {
      "lang": "en",
      "text": "Syntax.",
      "offset": 31.76,
      "duration": 3.84
    },
    {
      "lang": "en",
      "text": "[Music]",
      "offset": 34.07,
      "duration": 2.89
    },
    {
      "lang": "en",
      "text": "So, if you take a look at all of the",
      "offset": 35.6,
      "duration": 3.52
    },
    {
      "lang": "en",
      "text": "previous versions of ECMAScript, you can",
      "offset": 36.96,
      "duration": 5.36
    },
    {
      "lang": "en",
      "text": "see that in modern history, they release",
      "offset": 39.12,
      "duration": 5.84
    },
    {
      "lang": "en",
      "text": "a new version of the standard every year",
      "offset": 42.32,
      "duration": 5.28
    },
    {
      "lang": "en",
      "text": "in June. And essentially any proposal",
      "offset": 44.96,
      "duration": 5.599
    },
    {
      "lang": "en",
      "text": "that has made it to stage 4 before this",
      "offset": 47.6,
      "duration": 5.119
    },
    {
      "lang": "en",
      "text": "release of the standard in June will be",
      "offset": 50.559,
      "duration": 4.241
    },
    {
      "lang": "en",
      "text": "included in that new version of",
      "offset": 52.719,
      "duration": 3.68
    },
    {
      "lang": "en",
      "text": "ECMAScript. And so, this is where I got",
      "offset": 54.8,
      "duration": 3.04
    },
    {
      "lang": "en",
      "text": "all of this information. And if you take",
      "offset": 56.399,
      "duration": 3.281
    },
    {
      "lang": "en",
      "text": "a look at that same proposals repo,",
      "offset": 57.84,
      "duration": 2.879
    },
    {
      "lang": "en",
      "text": "there's a file called finished",
      "offset": 59.68,
      "duration": 3.199
    },
    {
      "lang": "en",
      "text": "proposals. And this is a table of every",
      "offset": 60.719,
      "duration": 4.16
    },
    {
      "lang": "en",
      "text": "single feature added to the language and",
      "offset": 62.879,
      "duration": 4.001
    },
    {
      "lang": "en",
      "text": "the year that it was finalized. So in",
      "offset": 64.879,
      "duration": 3.6
    },
    {
      "lang": "en",
      "text": "this table, everything that was",
      "offset": 66.88,
      "duration": 3.2
    },
    {
      "lang": "en",
      "text": "finalized to be published in the year",
      "offset": 68.479,
      "duration": 3.121
    },
    {
      "lang": "en",
      "text": "2025 is what we're going to be looking",
      "offset": 70.08,
      "duration": 3.039
    },
    {
      "lang": "en",
      "text": "at today. Now the first feature is",
      "offset": 71.6,
      "duration": 3.28
    },
    {
      "lang": "en",
      "text": "promise.try.",
      "offset": 73.119,
      "duration": 3.921
    },
    {
      "lang": "en",
      "text": "And this is useful if you are dealing",
      "offset": 74.88,
      "duration": 4.48
    },
    {
      "lang": "en",
      "text": "potentially with functions or libraries",
      "offset": 77.04,
      "duration": 5.28
    },
    {
      "lang": "en",
      "text": "from functions that may not return a",
      "offset": 79.36,
      "duration": 4.96
    },
    {
      "lang": "en",
      "text": "promise, but maybe sometimes return a",
      "offset": 82.32,
      "duration": 3.52
    },
    {
      "lang": "en",
      "text": "promise. You can see that it's baseline",
      "offset": 84.32,
      "duration": 3.68
    },
    {
      "lang": "en",
      "text": "2025 available. It's in all the major",
      "offset": 85.84,
      "duration": 4.16
    },
    {
      "lang": "en",
      "text": "browser engines. And essentially, you",
      "offset": 88,
      "duration": 3.759
    },
    {
      "lang": "en",
      "text": "would want to use this in a scenario",
      "offset": 90,
      "duration": 3.68
    },
    {
      "lang": "en",
      "text": "where maybe you have a function that",
      "offset": 91.759,
      "duration": 3.441
    },
    {
      "lang": "en",
      "text": "doesn't return a promise and you want to",
      "offset": 93.68,
      "duration": 3.28
    },
    {
      "lang": "en",
      "text": "like instantly resolve it. This is how",
      "offset": 95.2,
      "duration": 3.36
    },
    {
      "lang": "en",
      "text": "you might have done it before, but now",
      "offset": 96.96,
      "duration": 3.44
    },
    {
      "lang": "en",
      "text": "with promise.try, you can just pass the",
      "offset": 98.56,
      "duration": 3.199
    },
    {
      "lang": "en",
      "text": "function in directly. And it's important",
      "offset": 100.4,
      "duration": 3.679
    },
    {
      "lang": "en",
      "text": "to note that this is not equivalent to",
      "offset": 101.759,
      "duration": 3.841
    },
    {
      "lang": "en",
      "text": "promise.resolve.in",
      "offset": 104.079,
      "duration": 2.961
    },
    {
      "lang": "en",
      "text": "and then passing the function in because",
      "offset": 105.6,
      "duration": 3.519
    },
    {
      "lang": "en",
      "text": "this will actually behave asynchronously",
      "offset": 107.04,
      "duration": 4.24
    },
    {
      "lang": "en",
      "text": "and this function call will be put into",
      "offset": 109.119,
      "duration": 4.32
    },
    {
      "lang": "en",
      "text": "the microtask queue. Whereas with",
      "offset": 111.28,
      "duration": 3.92
    },
    {
      "lang": "en",
      "text": "promise.try, try. If this is a",
      "offset": 113.439,
      "duration": 3.201
    },
    {
      "lang": "en",
      "text": "synchronous function, it will just be",
      "offset": 115.2,
      "duration": 2.879
    },
    {
      "lang": "en",
      "text": "called synchronously. And you can see",
      "offset": 116.64,
      "duration": 2.56
    },
    {
      "lang": "en",
      "text": "this a little bit better in this",
      "offset": 118.079,
      "duration": 2.801
    },
    {
      "lang": "en",
      "text": "example. So this do something function",
      "offset": 119.2,
      "duration": 3.04
    },
    {
      "lang": "en",
      "text": "takes in any kind of function. That",
      "offset": 120.88,
      "duration": 2.64
    },
    {
      "lang": "en",
      "text": "function could return a promise or it",
      "offset": 122.24,
      "duration": 2.559
    },
    {
      "lang": "en",
      "text": "could just be a regular plain old",
      "offset": 123.52,
      "duration": 3.12
    },
    {
      "lang": "en",
      "text": "function. And we can call it with",
      "offset": 124.799,
      "duration": 3.68
    },
    {
      "lang": "en",
      "text": "regular functions, functions that throw",
      "offset": 126.64,
      "duration": 3.28
    },
    {
      "lang": "en",
      "text": "or async functions. So these are",
      "offset": 128.479,
      "duration": 3.441
    },
    {
      "lang": "en",
      "text": "functions that return a promise. But by",
      "offset": 129.92,
      "duration": 4.319
    },
    {
      "lang": "en",
      "text": "passing that into promise.try, we get a",
      "offset": 131.92,
      "duration": 4.16
    },
    {
      "lang": "en",
      "text": "consistent behavior. So we know that we",
      "offset": 134.239,
      "duration": 3.36
    },
    {
      "lang": "en",
      "text": "can use a dot then on it. We don't have",
      "offset": 136.08,
      "duration": 3.36
    },
    {
      "lang": "en",
      "text": "to check to see like if it is a promise.",
      "offset": 137.599,
      "duration": 3.36
    },
    {
      "lang": "en",
      "text": "So, this seems super useful, especially",
      "offset": 139.44,
      "duration": 3.84
    },
    {
      "lang": "en",
      "text": "if working like with legacy code bases",
      "offset": 140.959,
      "duration": 3.761
    },
    {
      "lang": "en",
      "text": "or libraries maybe that are like",
      "offset": 143.28,
      "duration": 2.64
    },
    {
      "lang": "en",
      "text": "callback based that haven't really",
      "offset": 144.72,
      "duration": 3.36
    },
    {
      "lang": "en",
      "text": "migrated to promises yet. I honestly",
      "offset": 145.92,
      "duration": 3.679
    },
    {
      "lang": "en",
      "text": "don't see myself using this as much",
      "offset": 148.08,
      "duration": 3.2
    },
    {
      "lang": "en",
      "text": "because most of the time if you're in",
      "offset": 149.599,
      "duration": 3.521
    },
    {
      "lang": "en",
      "text": "control of the code, you could just put",
      "offset": 151.28,
      "duration": 3.76
    },
    {
      "lang": "en",
      "text": "the async keyword on a function,",
      "offset": 153.12,
      "duration": 3.44
    },
    {
      "lang": "en",
      "text": "especially if it has like an early",
      "offset": 155.04,
      "duration": 3.6
    },
    {
      "lang": "en",
      "text": "return that isn't awaiting a promise,",
      "offset": 156.56,
      "duration": 4.08
    },
    {
      "lang": "en",
      "text": "but then maybe later on it does need to",
      "offset": 158.64,
      "duration": 3.52
    },
    {
      "lang": "en",
      "text": "return a promise. Putting the async",
      "offset": 160.64,
      "duration": 3.36
    },
    {
      "lang": "en",
      "text": "keyword on there means if this function",
      "offset": 162.16,
      "duration": 3.2
    },
    {
      "lang": "en",
      "text": "immediately returns, it's still",
      "offset": 164,
      "duration": 2.72
    },
    {
      "lang": "en",
      "text": "technically returning a promise. So, I",
      "offset": 165.36,
      "duration": 2.4
    },
    {
      "lang": "en",
      "text": "don't really see myself reaching for",
      "offset": 166.72,
      "duration": 2.799
    },
    {
      "lang": "en",
      "text": "this anytime soon, but you might",
      "offset": 167.76,
      "duration": 3.199
    },
    {
      "lang": "en",
      "text": "actually find a use case for this in",
      "offset": 169.519,
      "duration": 2.961
    },
    {
      "lang": "en",
      "text": "your codebase. Now, the next set of",
      "offset": 170.959,
      "duration": 3.601
    },
    {
      "lang": "en",
      "text": "features are actually seven methods that",
      "offset": 172.48,
      "duration": 4.479
    },
    {
      "lang": "en",
      "text": "have been added to the set prototype.",
      "offset": 174.56,
      "duration": 3.84
    },
    {
      "lang": "en",
      "text": "So, a set is a data structure that",
      "offset": 176.959,
      "duration": 3.28
    },
    {
      "lang": "en",
      "text": "allows us to only have unique items in a",
      "offset": 178.4,
      "duration": 3.839
    },
    {
      "lang": "en",
      "text": "collection. And you can create a set by",
      "offset": 180.239,
      "duration": 3.681
    },
    {
      "lang": "en",
      "text": "passing in an array. So, if you have an",
      "offset": 182.239,
      "duration": 3.121
    },
    {
      "lang": "en",
      "text": "array that potentially has duplicate",
      "offset": 183.92,
      "duration": 3.12
    },
    {
      "lang": "en",
      "text": "strings in it, you can pass it into a",
      "offset": 185.36,
      "duration": 3.44
    },
    {
      "lang": "en",
      "text": "set. That set will actually remove those",
      "offset": 187.04,
      "duration": 4.32
    },
    {
      "lang": "en",
      "text": "duplicates. But these methods make it",
      "offset": 188.8,
      "duration": 4.24
    },
    {
      "lang": "en",
      "text": "really useful to perform operations",
      "offset": 191.36,
      "duration": 3.28
    },
    {
      "lang": "en",
      "text": "between two sets. And if you check out",
      "offset": 193.04,
      "duration": 3.52
    },
    {
      "lang": "en",
      "text": "the MDN page, they have some nice vin",
      "offset": 194.64,
      "duration": 4.239
    },
    {
      "lang": "en",
      "text": "diagrams that show what these methods",
      "offset": 196.56,
      "duration": 4.64
    },
    {
      "lang": "en",
      "text": "actually do. And these methods come from",
      "offset": 198.879,
      "duration": 3.921
    },
    {
      "lang": "en",
      "text": "the world of mathematics because there's",
      "offset": 201.2,
      "duration": 3.119
    },
    {
      "lang": "en",
      "text": "a thing called set theory. And in",
      "offset": 202.8,
      "duration": 3.6
    },
    {
      "lang": "en",
      "text": "mathematics, we work with sets. And all",
      "offset": 204.319,
      "duration": 3.761
    },
    {
      "lang": "en",
      "text": "of these method names are from",
      "offset": 206.4,
      "duration": 2.88
    },
    {
      "lang": "en",
      "text": "mathematics. So difference,",
      "offset": 208.08,
      "duration": 2.799
    },
    {
      "lang": "en",
      "text": "intersection, symmetric difference,",
      "offset": 209.28,
      "duration": 4.319
    },
    {
      "lang": "en",
      "text": "union, is disjoint from, is subset of.",
      "offset": 210.879,
      "duration": 4.161
    },
    {
      "lang": "en",
      "text": "But if you look at these vin diagrams,",
      "offset": 213.599,
      "duration": 3.521
    },
    {
      "lang": "en",
      "text": "it gives you a good picture of what",
      "offset": 215.04,
      "duration": 3.44
    },
    {
      "lang": "en",
      "text": "happens when you perform this operation",
      "offset": 217.12,
      "duration": 3.52
    },
    {
      "lang": "en",
      "text": "on two sets. And to really see where",
      "offset": 218.48,
      "duration": 3.839
    },
    {
      "lang": "en",
      "text": "this is useful, I have some examples",
      "offset": 220.64,
      "duration": 3.2
    },
    {
      "lang": "en",
      "text": "where we're just using some JavaScript",
      "offset": 222.319,
      "duration": 3.2
    },
    {
      "lang": "en",
      "text": "arrays. So in this example, we're doing",
      "offset": 223.84,
      "duration": 3.44
    },
    {
      "lang": "en",
      "text": "some access control. So let's say we",
      "offset": 225.519,
      "duration": 4
    },
    {
      "lang": "en",
      "text": "have a list of users that are active in",
      "offset": 227.28,
      "duration": 4.239
    },
    {
      "lang": "en",
      "text": "the system and then a list of users that",
      "offset": 229.519,
      "duration": 3.921
    },
    {
      "lang": "en",
      "text": "are admins. If I want to figure out",
      "offset": 231.519,
      "duration": 4
    },
    {
      "lang": "en",
      "text": "which of the admins are active, we could",
      "offset": 233.44,
      "duration": 3.84
    },
    {
      "lang": "en",
      "text": "do like a filter. So take all of the",
      "offset": 235.519,
      "duration": 3.28
    },
    {
      "lang": "en",
      "text": "active users and then filter any out",
      "offset": 237.28,
      "duration": 3.44
    },
    {
      "lang": "en",
      "text": "that are admins. And then if I want to",
      "offset": 238.799,
      "duration": 3.36
    },
    {
      "lang": "en",
      "text": "do the reverse of that, I could take all",
      "offset": 240.72,
      "duration": 3.36
    },
    {
      "lang": "en",
      "text": "the active users and filter out the ones",
      "offset": 242.159,
      "duration": 3.921
    },
    {
      "lang": "en",
      "text": "that are not admins. And then similarly,",
      "offset": 244.08,
      "duration": 3.439
    },
    {
      "lang": "en",
      "text": "if I want to find all the admins that",
      "offset": 246.08,
      "duration": 3.2
    },
    {
      "lang": "en",
      "text": "are active, I could say g give me all",
      "offset": 247.519,
      "duration": 3.761
    },
    {
      "lang": "en",
      "text": "the admin users where every single one",
      "offset": 249.28,
      "duration": 4.239
    },
    {
      "lang": "en",
      "text": "is in the active user array. So these",
      "offset": 251.28,
      "duration": 3.76
    },
    {
      "lang": "en",
      "text": "are kind of two different ways to get",
      "offset": 253.519,
      "duration": 4.081
    },
    {
      "lang": "en",
      "text": "the admins that are active. But you",
      "offset": 255.04,
      "duration": 3.68
    },
    {
      "lang": "en",
      "text": "might have come across some code like",
      "offset": 257.6,
      "duration": 4.24
    },
    {
      "lang": "en",
      "text": "this in a codebase and um it takes a",
      "offset": 258.72,
      "duration": 4.16
    },
    {
      "lang": "en",
      "text": "second for you to kind of understand",
      "offset": 261.84,
      "duration": 2.639
    },
    {
      "lang": "en",
      "text": "what's happening. But if we were to use",
      "offset": 262.88,
      "duration": 3.599
    },
    {
      "lang": "en",
      "text": "set methods, the active admins are just",
      "offset": 264.479,
      "duration": 3.761
    },
    {
      "lang": "en",
      "text": "an intersection of the active users and",
      "offset": 266.479,
      "duration": 4.321
    },
    {
      "lang": "en",
      "text": "the admin users. The non-admins is the",
      "offset": 268.24,
      "duration": 4
    },
    {
      "lang": "en",
      "text": "difference between the active users and",
      "offset": 270.8,
      "duration": 3.44
    },
    {
      "lang": "en",
      "text": "the admin users. And active admins is",
      "offset": 272.24,
      "duration": 4.88
    },
    {
      "lang": "en",
      "text": "also where admin users is a subset of",
      "offset": 274.24,
      "duration": 4.399
    },
    {
      "lang": "en",
      "text": "active users. Now again, these two",
      "offset": 277.12,
      "duration": 2.96
    },
    {
      "lang": "en",
      "text": "things are basically doing the same",
      "offset": 278.639,
      "duration": 3.361
    },
    {
      "lang": "en",
      "text": "thing. It's just in the other direction.",
      "offset": 280.08,
      "duration": 4.16
    },
    {
      "lang": "en",
      "text": "Uh but if you find yourself doing a lot",
      "offset": 282,
      "duration": 4.56
    },
    {
      "lang": "en",
      "text": "of array comparison in your app, you",
      "offset": 284.24,
      "duration": 3.679
    },
    {
      "lang": "en",
      "text": "could potentially benefit from these set",
      "offset": 286.56,
      "duration": 3.12
    },
    {
      "lang": "en",
      "text": "methods by just turning your arrays into",
      "offset": 287.919,
      "duration": 3.761
    },
    {
      "lang": "en",
      "text": "sets. Another example of this is",
      "offset": 289.68,
      "duration": 3.44
    },
    {
      "lang": "en",
      "text": "synchronizing some data. So maybe you",
      "offset": 291.68,
      "duration": 3.12
    },
    {
      "lang": "en",
      "text": "have some data locally and then you also",
      "offset": 293.12,
      "duration": 2.88
    },
    {
      "lang": "en",
      "text": "have some data that's coming from a",
      "offset": 294.8,
      "duration": 3.679
    },
    {
      "lang": "en",
      "text": "server and you want to know what are the",
      "offset": 296,
      "duration": 4
    },
    {
      "lang": "en",
      "text": "new items that I don't currently have",
      "offset": 298.479,
      "duration": 3.041
    },
    {
      "lang": "en",
      "text": "locally. So you might take all the local",
      "offset": 300,
      "duration": 3.6
    },
    {
      "lang": "en",
      "text": "items, filter out the ones that the",
      "offset": 301.52,
      "duration": 3.36
    },
    {
      "lang": "en",
      "text": "remote does not have, and then you know",
      "offset": 303.6,
      "duration": 2.96
    },
    {
      "lang": "en",
      "text": "those are the new ones. Similarly, in",
      "offset": 304.88,
      "duration": 3.2
    },
    {
      "lang": "en",
      "text": "the remote list, if things have been",
      "offset": 306.56,
      "duration": 2.72
    },
    {
      "lang": "en",
      "text": "removed, you might want to filter out",
      "offset": 308.08,
      "duration": 2.88
    },
    {
      "lang": "en",
      "text": "the ones that are no longer in there.",
      "offset": 309.28,
      "duration": 2.8
    },
    {
      "lang": "en",
      "text": "You might also want to figure out for",
      "offset": 310.96,
      "duration": 3.04
    },
    {
      "lang": "en",
      "text": "common items which ones are both local",
      "offset": 312.08,
      "duration": 4.16
    },
    {
      "lang": "en",
      "text": "and remote. And then you might also want",
      "offset": 314,
      "duration": 3.44
    },
    {
      "lang": "en",
      "text": "to know which ones are completely",
      "offset": 316.24,
      "duration": 2.64
    },
    {
      "lang": "en",
      "text": "different from your local and remote",
      "offset": 317.44,
      "duration": 3.599
    },
    {
      "lang": "en",
      "text": "array. But again, trying to read all of",
      "offset": 318.88,
      "duration": 3.92
    },
    {
      "lang": "en",
      "text": "this code takes a lot of brain power. If",
      "offset": 321.039,
      "duration": 3.681
    },
    {
      "lang": "en",
      "text": "we use set methods, it's a lot more",
      "offset": 322.8,
      "duration": 3.92
    },
    {
      "lang": "en",
      "text": "straightforward. So the items to add is",
      "offset": 324.72,
      "duration": 3.12
    },
    {
      "lang": "en",
      "text": "just the difference between the local",
      "offset": 326.72,
      "duration": 2.96
    },
    {
      "lang": "en",
      "text": "items and the remote items. The items to",
      "offset": 327.84,
      "duration": 3.04
    },
    {
      "lang": "en",
      "text": "remove is the difference between the",
      "offset": 329.68,
      "duration": 3.12
    },
    {
      "lang": "en",
      "text": "remote items and the local items. The",
      "offset": 330.88,
      "duration": 3.759
    },
    {
      "lang": "en",
      "text": "common items is the intersection between",
      "offset": 332.8,
      "duration": 3.44
    },
    {
      "lang": "en",
      "text": "local and remote. And we can find the",
      "offset": 334.639,
      "duration": 2.881
    },
    {
      "lang": "en",
      "text": "difference between the sets by using",
      "offset": 336.24,
      "duration": 3.28
    },
    {
      "lang": "en",
      "text": "local items is disjoint from remote",
      "offset": 337.52,
      "duration": 3.76
    },
    {
      "lang": "en",
      "text": "items. So these methods take some",
      "offset": 339.52,
      "duration": 3.44
    },
    {
      "lang": "en",
      "text": "getting used to, but the code is a lot",
      "offset": 341.28,
      "duration": 3.199
    },
    {
      "lang": "en",
      "text": "nicer to read instead of having to",
      "offset": 342.96,
      "duration": 3.679
    },
    {
      "lang": "en",
      "text": "figure out all these like filters uh and",
      "offset": 344.479,
      "duration": 3.201
    },
    {
      "lang": "en",
      "text": "different things like that that you",
      "offset": 346.639,
      "duration": 2.321
    },
    {
      "lang": "en",
      "text": "might be doing in your codebase. Next",
      "offset": 347.68,
      "duration": 3.12
    },
    {
      "lang": "en",
      "text": "up, there are three features that have",
      "offset": 348.96,
      "duration": 3.84
    },
    {
      "lang": "en",
      "text": "been added to regular expressions. The",
      "offset": 350.8,
      "duration": 4.32
    },
    {
      "lang": "en",
      "text": "first one being reax.escape. So this",
      "offset": 352.8,
      "duration": 4
    },
    {
      "lang": "en",
      "text": "adds a method to the global reax object",
      "offset": 355.12,
      "duration": 3.919
    },
    {
      "lang": "en",
      "text": "where you can pass in a string that",
      "offset": 356.8,
      "duration": 4.08
    },
    {
      "lang": "en",
      "text": "might have things that are like special",
      "offset": 359.039,
      "duration": 3.6
    },
    {
      "lang": "en",
      "text": "characters in regular expressions and it",
      "offset": 360.88,
      "duration": 3.599
    },
    {
      "lang": "en",
      "text": "will automatically escape them for you.",
      "offset": 362.639,
      "duration": 3.84
    },
    {
      "lang": "en",
      "text": "So for instance, if you pass in this",
      "offset": 364.479,
      "duration": 3.681
    },
    {
      "lang": "en",
      "text": "sentence that says buy it, use it, break",
      "offset": 366.479,
      "duration": 4.081
    },
    {
      "lang": "en",
      "text": "it, fix it. These periods, if you didn't",
      "offset": 368.16,
      "duration": 4.64
    },
    {
      "lang": "en",
      "text": "escape them, would be interpreted as the",
      "offset": 370.56,
      "duration": 4.16
    },
    {
      "lang": "en",
      "text": "regular expression token that matches on",
      "offset": 372.8,
      "duration": 3.679
    },
    {
      "lang": "en",
      "text": "anything. But let's say you're dealing",
      "offset": 374.72,
      "duration": 3.44
    },
    {
      "lang": "en",
      "text": "with some user provided data, like maybe",
      "offset": 376.479,
      "duration": 3.361
    },
    {
      "lang": "en",
      "text": "a user types into a search form and then",
      "offset": 378.16,
      "duration": 3.039
    },
    {
      "lang": "en",
      "text": "you want to pass that into a regular",
      "offset": 379.84,
      "duration": 3.199
    },
    {
      "lang": "en",
      "text": "expression. Typically, you had to reach",
      "offset": 381.199,
      "duration": 3.84
    },
    {
      "lang": "en",
      "text": "for a library or manually write some",
      "offset": 383.039,
      "duration": 4.081
    },
    {
      "lang": "en",
      "text": "code that would find all the characters",
      "offset": 385.039,
      "duration": 3.921
    },
    {
      "lang": "en",
      "text": "that might be interpreted as regular",
      "offset": 387.12,
      "duration": 4.16
    },
    {
      "lang": "en",
      "text": "expression tokens and then escape them.",
      "offset": 388.96,
      "duration": 4.56
    },
    {
      "lang": "en",
      "text": "Rejax.escape does this automatically.",
      "offset": 391.28,
      "duration": 3.44
    },
    {
      "lang": "en",
      "text": "So, this is something that people have",
      "offset": 393.52,
      "duration": 3.04
    },
    {
      "lang": "en",
      "text": "been asking for for a very long time.",
      "offset": 394.72,
      "duration": 3.039
    },
    {
      "lang": "en",
      "text": "Now, you don't have to install a",
      "offset": 396.56,
      "duration": 2.8
    },
    {
      "lang": "en",
      "text": "separate library. It's super easy to",
      "offset": 397.759,
      "duration": 3.44
    },
    {
      "lang": "en",
      "text": "just take some user provided input,",
      "offset": 399.36,
      "duration": 3.279
    },
    {
      "lang": "en",
      "text": "escape it, and then pass it into a",
      "offset": 401.199,
      "duration": 2.801
    },
    {
      "lang": "en",
      "text": "regular expression. The next regular",
      "offset": 402.639,
      "duration": 2.961
    },
    {
      "lang": "en",
      "text": "expression feature is called regular",
      "offset": 404,
      "duration": 3.68
    },
    {
      "lang": "en",
      "text": "expression pattern modifiers. So,",
      "offset": 405.6,
      "duration": 4.24
    },
    {
      "lang": "en",
      "text": "pattern modifiers already exist. So for",
      "offset": 407.68,
      "duration": 3.28
    },
    {
      "lang": "en",
      "text": "instance, you can create a regular",
      "offset": 409.84,
      "duration": 3.199
    },
    {
      "lang": "en",
      "text": "expression and then pass in I on the end",
      "offset": 410.96,
      "duration": 3.359
    },
    {
      "lang": "en",
      "text": "of it and this will be a case",
      "offset": 413.039,
      "duration": 3.121
    },
    {
      "lang": "en",
      "text": "insensitive regular expression. If you",
      "offset": 414.319,
      "duration": 3.521
    },
    {
      "lang": "en",
      "text": "look on MDN, they have all the various",
      "offset": 416.16,
      "duration": 3.599
    },
    {
      "lang": "en",
      "text": "flags you can pass in. You could do G",
      "offset": 417.84,
      "duration": 3.919
    },
    {
      "lang": "en",
      "text": "for a global search. You could do M for",
      "offset": 419.759,
      "duration": 4.481
    },
    {
      "lang": "en",
      "text": "a multi-line search or use S that will",
      "offset": 421.759,
      "duration": 4.401
    },
    {
      "lang": "en",
      "text": "allow periods to match on newline",
      "offset": 424.24,
      "duration": 2.959
    },
    {
      "lang": "en",
      "text": "characters. So there's several different",
      "offset": 426.16,
      "duration": 2.96
    },
    {
      "lang": "en",
      "text": "flags that you can pass in. But what the",
      "offset": 427.199,
      "duration": 4.321
    },
    {
      "lang": "en",
      "text": "modifiers feature allows us to do is",
      "offset": 429.12,
      "duration": 4.4
    },
    {
      "lang": "en",
      "text": "pass in these global flags that will be",
      "offset": 431.52,
      "duration": 3.76
    },
    {
      "lang": "en",
      "text": "applied to the whole regular expression,",
      "offset": 433.52,
      "duration": 3.679
    },
    {
      "lang": "en",
      "text": "but then within the regular expression,",
      "offset": 435.28,
      "duration": 4.08
    },
    {
      "lang": "en",
      "text": "we can disable some of those flags. So",
      "offset": 437.199,
      "duration": 4.081
    },
    {
      "lang": "en",
      "text": "this whole expression is case",
      "offset": 439.36,
      "duration": 4.32
    },
    {
      "lang": "en",
      "text": "insensitive but for this one matching",
      "offset": 441.28,
      "duration": 4.8
    },
    {
      "lang": "en",
      "text": "group it is not case sensitive meaning",
      "offset": 443.68,
      "duration": 4.88
    },
    {
      "lang": "en",
      "text": "the second match here has to be",
      "offset": 446.08,
      "duration": 4.16
    },
    {
      "lang": "en",
      "text": "lowercase a toz instead of also",
      "offset": 448.56,
      "duration": 3.44
    },
    {
      "lang": "en",
      "text": "including uppercases and similarly if",
      "offset": 450.24,
      "duration": 3.359
    },
    {
      "lang": "en",
      "text": "you don't have a flag on the end here",
      "offset": 452,
      "duration": 3.599
    },
    {
      "lang": "en",
      "text": "you can just make a subsection of your",
      "offset": 453.599,
      "duration": 4.32
    },
    {
      "lang": "en",
      "text": "regular expression be case insensitive.",
      "offset": 455.599,
      "duration": 4
    },
    {
      "lang": "en",
      "text": "So this is really nice. Before you used",
      "offset": 457.919,
      "duration": 3.201
    },
    {
      "lang": "en",
      "text": "to have to create like multiple regular",
      "offset": 459.599,
      "duration": 3.761
    },
    {
      "lang": "en",
      "text": "expressions or get much more specific",
      "offset": 461.12,
      "duration": 5.199
    },
    {
      "lang": "en",
      "text": "with how you define the matching groups,",
      "offset": 463.36,
      "duration": 4.559
    },
    {
      "lang": "en",
      "text": "but with this you can take an existing",
      "offset": 466.319,
      "duration": 3.201
    },
    {
      "lang": "en",
      "text": "one and just turn off or turn on those",
      "offset": 467.919,
      "duration": 3.28
    },
    {
      "lang": "en",
      "text": "modifiers inside of groups. And the last",
      "offset": 469.52,
      "duration": 3.44
    },
    {
      "lang": "en",
      "text": "feature added to regular expressions is",
      "offset": 471.199,
      "duration": 4.081
    },
    {
      "lang": "en",
      "text": "duplicate named capturing groups. Now",
      "offset": 472.96,
      "duration": 3.919
    },
    {
      "lang": "en",
      "text": "you might not know this, but you can",
      "offset": 475.28,
      "duration": 4.319
    },
    {
      "lang": "en",
      "text": "actually create named groups inside of",
      "offset": 476.879,
      "duration": 4.641
    },
    {
      "lang": "en",
      "text": "your regular expression. So this regular",
      "offset": 479.599,
      "duration": 4.32
    },
    {
      "lang": "en",
      "text": "expression says if you match four digits",
      "offset": 481.52,
      "duration": 4.48
    },
    {
      "lang": "en",
      "text": "at the beginning of this incoming string",
      "offset": 483.919,
      "duration": 3.28
    },
    {
      "lang": "en",
      "text": "that's going to be in a group called",
      "offset": 486,
      "duration": 2.56
    },
    {
      "lang": "en",
      "text": "year and then after that we're matching",
      "offset": 487.199,
      "duration": 4.081
    },
    {
      "lang": "en",
      "text": "two more digits or we might see two",
      "offset": 488.56,
      "duration": 5.52
    },
    {
      "lang": "en",
      "text": "digits four digits. So this is a regular",
      "offset": 491.28,
      "duration": 4.4
    },
    {
      "lang": "en",
      "text": "expression that would match on dates",
      "offset": 494.08,
      "duration": 4.08
    },
    {
      "lang": "en",
      "text": "either the four-digit year- the month or",
      "offset": 495.68,
      "duration": 4.48
    },
    {
      "lang": "en",
      "text": "the month dash the four-digit year. And",
      "offset": 498.16,
      "duration": 3.28
    },
    {
      "lang": "en",
      "text": "in this case you can see that we're",
      "offset": 500.16,
      "duration": 3.759
    },
    {
      "lang": "en",
      "text": "putting a group name on the year here.",
      "offset": 501.44,
      "duration": 3.92
    },
    {
      "lang": "en",
      "text": "But before this feature was added this",
      "offset": 503.919,
      "duration": 2.881
    },
    {
      "lang": "en",
      "text": "would actually throw a syntax error",
      "offset": 505.36,
      "duration": 3.92
    },
    {
      "lang": "en",
      "text": "because we had the group year repeated",
      "offset": 506.8,
      "duration": 4.399
    },
    {
      "lang": "en",
      "text": "twice. And if you look on the MDN page,",
      "offset": 509.28,
      "duration": 3.439
    },
    {
      "lang": "en",
      "text": "it actually hasn't been updated for the",
      "offset": 511.199,
      "duration": 3.52
    },
    {
      "lang": "en",
      "text": "latest spec yet because there is this",
      "offset": 512.719,
      "duration": 4.721
    },
    {
      "lang": "en",
      "text": "caveat here that says all names must be",
      "offset": 514.719,
      "duration": 4.88
    },
    {
      "lang": "en",
      "text": "unique within the same pattern. Multiple",
      "offset": 517.44,
      "duration": 3.68
    },
    {
      "lang": "en",
      "text": "named capturing groups with the same",
      "offset": 519.599,
      "duration": 3.68
    },
    {
      "lang": "en",
      "text": "name would result in a syntax error. So",
      "offset": 521.12,
      "duration": 3.6
    },
    {
      "lang": "en",
      "text": "right now, if you were to run this code",
      "offset": 523.279,
      "duration": 3.041
    },
    {
      "lang": "en",
      "text": "on a JavaScript engine that hasn't been",
      "offset": 524.72,
      "duration": 3.28
    },
    {
      "lang": "en",
      "text": "updated yet, this wouldn't even work",
      "offset": 526.32,
      "duration": 3.68
    },
    {
      "lang": "en",
      "text": "because we have the word year twice. But",
      "offset": 528,
      "duration": 3.92
    },
    {
      "lang": "en",
      "text": "now with this new addition, we can use",
      "offset": 530,
      "duration": 3.92
    },
    {
      "lang": "en",
      "text": "the same capture group name in multiple",
      "offset": 531.92,
      "duration": 3.599
    },
    {
      "lang": "en",
      "text": "places inside of a regular expression.",
      "offset": 533.92,
      "duration": 3.84
    },
    {
      "lang": "en",
      "text": "Now, these next two features deal with",
      "offset": 535.519,
      "duration": 4.561
    },
    {
      "lang": "en",
      "text": "importing things into our JavaScript",
      "offset": 537.76,
      "duration": 3.92
    },
    {
      "lang": "en",
      "text": "codes. And it was originally just a",
      "offset": 540.08,
      "duration": 2.96
    },
    {
      "lang": "en",
      "text": "single proposal, but it's actually been",
      "offset": 541.68,
      "duration": 2.88
    },
    {
      "lang": "en",
      "text": "broken out into two. So, import",
      "offset": 543.04,
      "duration": 2.64
    },
    {
      "lang": "en",
      "text": "attributes you might have seen,",
      "offset": 544.56,
      "duration": 2.16
    },
    {
      "lang": "en",
      "text": "especially if you've worked in",
      "offset": 545.68,
      "duration": 2.64
    },
    {
      "lang": "en",
      "text": "TypeScript code, where you want to",
      "offset": 546.72,
      "duration": 4.08
    },
    {
      "lang": "en",
      "text": "import a JSON file and then you use the",
      "offset": 548.32,
      "duration": 4.88
    },
    {
      "lang": "en",
      "text": "width assertion. This actually formally",
      "offset": 550.8,
      "duration": 4.4
    },
    {
      "lang": "en",
      "text": "adds it to the JavaScript language. And",
      "offset": 553.2,
      "duration": 4.079
    },
    {
      "lang": "en",
      "text": "it also works with dynamic imports.",
      "offset": 555.2,
      "duration": 3.68
    },
    {
      "lang": "en",
      "text": "Essentially, we can pass in the options",
      "offset": 557.279,
      "duration": 2.881
    },
    {
      "lang": "en",
      "text": "there. But where this is really",
      "offset": 558.88,
      "duration": 3.12
    },
    {
      "lang": "en",
      "text": "interesting is supporting things beyond",
      "offset": 560.16,
      "duration": 5.92
    },
    {
      "lang": "en",
      "text": "JSON. So this formalizes the syntax and",
      "offset": 562,
      "duration": 5.76
    },
    {
      "lang": "en",
      "text": "we also have the proposal that",
      "offset": 566.08,
      "duration": 4.8
    },
    {
      "lang": "en",
      "text": "specifically allows for JSON modules and",
      "offset": 567.76,
      "duration": 5.199
    },
    {
      "lang": "en",
      "text": "all of the engines now support type of",
      "offset": 570.88,
      "duration": 4.16
    },
    {
      "lang": "en",
      "text": "JSON. But this sets us up so that in the",
      "offset": 572.959,
      "duration": 4
    },
    {
      "lang": "en",
      "text": "future we could have type CSS or type",
      "offset": 575.04,
      "duration": 4
    },
    {
      "lang": "en",
      "text": "HTML. And so imagine being able to",
      "offset": 576.959,
      "duration": 4.481
    },
    {
      "lang": "en",
      "text": "import like an HTML partial and using it",
      "offset": 579.04,
      "duration": 4.479
    },
    {
      "lang": "en",
      "text": "in your JavaScript code or being able to",
      "offset": 581.44,
      "duration": 3.839
    },
    {
      "lang": "en",
      "text": "import CSS modules directly into",
      "offset": 583.519,
      "duration": 3.601
    },
    {
      "lang": "en",
      "text": "JavaScript code without the need of a",
      "offset": 585.279,
      "duration": 3.441
    },
    {
      "lang": "en",
      "text": "bundler. Now this was new to me but",
      "offset": 587.12,
      "duration": 3.6
    },
    {
      "lang": "en",
      "text": "importing CSS actually works inside of",
      "offset": 588.72,
      "duration": 3.2
    },
    {
      "lang": "en",
      "text": "Chrome browser right now. Now, if you",
      "offset": 590.72,
      "duration": 2.72
    },
    {
      "lang": "en",
      "text": "look on the MDN page, they have this",
      "offset": 591.92,
      "duration": 3.919
    },
    {
      "lang": "en",
      "text": "example where you import a stylesheet",
      "offset": 593.44,
      "duration": 4.88
    },
    {
      "lang": "en",
      "text": "from a URL with type CSS. Now, I tried",
      "offset": 595.839,
      "duration": 4.241
    },
    {
      "lang": "en",
      "text": "running this inside of Firefox. It says",
      "offset": 598.32,
      "duration": 4.16
    },
    {
      "lang": "en",
      "text": "invalid module type, but in Chrome, this",
      "offset": 600.08,
      "duration": 3.84
    },
    {
      "lang": "en",
      "text": "actually works. So, I have some example",
      "offset": 602.48,
      "duration": 3.52
    },
    {
      "lang": "en",
      "text": "codes here. I just have an HTML file.",
      "offset": 603.92,
      "duration": 3.84
    },
    {
      "lang": "en",
      "text": "I'm bringing in this JavaScript file as",
      "offset": 606,
      "duration": 3.68
    },
    {
      "lang": "en",
      "text": "type module. And then I have a div with",
      "offset": 607.76,
      "duration": 3.759
    },
    {
      "lang": "en",
      "text": "a class of card on the page. And then in",
      "offset": 609.68,
      "duration": 4.159
    },
    {
      "lang": "en",
      "text": "my JavaScript, I'm importing this style",
      "offset": 611.519,
      "duration": 5.041
    },
    {
      "lang": "en",
      "text": "file. I'm also importing a JSON file.",
      "offset": 613.839,
      "duration": 4.401
    },
    {
      "lang": "en",
      "text": "It's just a little object with a message",
      "offset": 616.56,
      "duration": 3.519
    },
    {
      "lang": "en",
      "text": "hello world. And then in order to apply",
      "offset": 618.24,
      "duration": 3.92
    },
    {
      "lang": "en",
      "text": "these styles to the document, we have to",
      "offset": 620.079,
      "duration": 4.641
    },
    {
      "lang": "en",
      "text": "use the adopted stylesheets property on",
      "offset": 622.16,
      "duration": 4.72
    },
    {
      "lang": "en",
      "text": "the document and add those styles to it.",
      "offset": 624.72,
      "duration": 3.679
    },
    {
      "lang": "en",
      "text": "And then now that I pulled that data in",
      "offset": 626.88,
      "duration": 3.04
    },
    {
      "lang": "en",
      "text": "as well, I'm actually updating the text",
      "offset": 628.399,
      "duration": 3.201
    },
    {
      "lang": "en",
      "text": "content on the page. And if we look at",
      "offset": 629.92,
      "duration": 3.84
    },
    {
      "lang": "en",
      "text": "the styles, it's just some standard CSS.",
      "offset": 631.6,
      "duration": 3.919
    },
    {
      "lang": "en",
      "text": "So I set up light and dark mode and then",
      "offset": 633.76,
      "duration": 3.84
    },
    {
      "lang": "en",
      "text": "style this card appropriately. But when",
      "offset": 635.519,
      "duration": 3.921
    },
    {
      "lang": "en",
      "text": "this code runs, you can see that it",
      "offset": 637.6,
      "duration": 3.44
    },
    {
      "lang": "en",
      "text": "actually adds those styles to the page.",
      "offset": 639.44,
      "duration": 2.88
    },
    {
      "lang": "en",
      "text": "Now, where I see this being very useful",
      "offset": 641.04,
      "duration": 3.039
    },
    {
      "lang": "en",
      "text": "is with things like web components. So",
      "offset": 642.32,
      "duration": 3.44
    },
    {
      "lang": "en",
      "text": "in this case, I'm adding the styles to",
      "offset": 644.079,
      "duration": 3.681
    },
    {
      "lang": "en",
      "text": "the entire page, but this also works",
      "offset": 645.76,
      "duration": 3.44
    },
    {
      "lang": "en",
      "text": "with the shadowdom. So you could",
      "offset": 647.76,
      "duration": 3.44
    },
    {
      "lang": "en",
      "text": "potentially import a CSS file like this",
      "offset": 649.2,
      "duration": 3.84
    },
    {
      "lang": "en",
      "text": "and then add it directly to the",
      "offset": 651.2,
      "duration": 4.079
    },
    {
      "lang": "en",
      "text": "shadowdom of a web component. Now, like",
      "offset": 653.04,
      "duration": 4.4
    },
    {
      "lang": "en",
      "text": "I mentioned, type CSS is only supported",
      "offset": 655.279,
      "duration": 3.601
    },
    {
      "lang": "en",
      "text": "inside of Chrome right now, but",
      "offset": 657.44,
      "duration": 2.8
    },
    {
      "lang": "en",
      "text": "eventually once this is supported in a",
      "offset": 658.88,
      "duration": 3.28
    },
    {
      "lang": "en",
      "text": "lot more places, we'll have much more",
      "offset": 660.24,
      "duration": 3.52
    },
    {
      "lang": "en",
      "text": "modular code that's starting to look a",
      "offset": 662.16,
      "duration": 3.04
    },
    {
      "lang": "en",
      "text": "lot like the kind of code you can write",
      "offset": 663.76,
      "duration": 3.199
    },
    {
      "lang": "en",
      "text": "when you have a bundler. The next new",
      "offset": 665.2,
      "duration": 4.16
    },
    {
      "lang": "en",
      "text": "feature is iterator helpers. So",
      "offset": 666.959,
      "duration": 5.521
    },
    {
      "lang": "en",
      "text": "iterators in JavaScript are this little",
      "offset": 669.36,
      "duration": 5.36
    },
    {
      "lang": "en",
      "text": "star syntax in the yield syntax. So the",
      "offset": 672.48,
      "duration": 4.16
    },
    {
      "lang": "en",
      "text": "these are generators and essentially",
      "offset": 674.72,
      "duration": 3.2
    },
    {
      "lang": "en",
      "text": "they're functions that can return",
      "offset": 676.64,
      "duration": 2.72
    },
    {
      "lang": "en",
      "text": "multiple values. And so if you haven't",
      "offset": 677.92,
      "duration": 3.12
    },
    {
      "lang": "en",
      "text": "seen these before, the way it would work",
      "offset": 679.36,
      "duration": 3.52
    },
    {
      "lang": "en",
      "text": "is you could invoke this function but",
      "offset": 681.04,
      "duration": 3.919
    },
    {
      "lang": "en",
      "text": "this gives you back an iterator and then",
      "offset": 682.88,
      "duration": 3.6
    },
    {
      "lang": "en",
      "text": "that iterator if you want to get the",
      "offset": 684.959,
      "duration": 3.841
    },
    {
      "lang": "en",
      "text": "next value that is yielded you call",
      "offset": 686.48,
      "duration": 4.24
    },
    {
      "lang": "en",
      "text": "next. So the first time you call",
      "offset": 688.8,
      "duration": 4.4
    },
    {
      "lang": "en",
      "text": "naturals you would get zero and then if",
      "offset": 690.72,
      "duration": 4.559
    },
    {
      "lang": "en",
      "text": "you call next you would get one and then",
      "offset": 693.2,
      "duration": 4.24
    },
    {
      "lang": "en",
      "text": "if you call next you would get two etc.",
      "offset": 695.279,
      "duration": 4.161
    },
    {
      "lang": "en",
      "text": "But these iterator helpers basically",
      "offset": 697.44,
      "duration": 3.92
    },
    {
      "lang": "en",
      "text": "give us map, filter, reduce, all the",
      "offset": 699.44,
      "duration": 3.839
    },
    {
      "lang": "en",
      "text": "things that you're used to using on",
      "offset": 701.36,
      "duration": 5.039
    },
    {
      "lang": "en",
      "text": "arrays, you can now use on iterators. So",
      "offset": 703.279,
      "duration": 5.361
    },
    {
      "lang": "en",
      "text": "in this case, we add map to this",
      "offset": 706.399,
      "duration": 4.161
    },
    {
      "lang": "en",
      "text": "iterator here. And now instead of just",
      "offset": 708.64,
      "duration": 4.4
    },
    {
      "lang": "en",
      "text": "returning 1 2 3 4, we're returning the",
      "offset": 710.56,
      "duration": 4.719
    },
    {
      "lang": "en",
      "text": "value multiplied by itself. And what's",
      "offset": 713.04,
      "duration": 3.76
    },
    {
      "lang": "en",
      "text": "nice about this is because it's an",
      "offset": 715.279,
      "duration": 3.441
    },
    {
      "lang": "en",
      "text": "iterator, this map isn't going to just",
      "offset": 716.8,
      "duration": 4.32
    },
    {
      "lang": "en",
      "text": "run all at once. Essentially, when you",
      "offset": 718.72,
      "duration": 5.04
    },
    {
      "lang": "en",
      "text": "call next, that's when it will evaluate",
      "offset": 721.12,
      "duration": 4.8
    },
    {
      "lang": "en",
      "text": "that map function for the value that",
      "offset": 723.76,
      "duration": 3.92
    },
    {
      "lang": "en",
      "text": "it's about to provide. So, if you're new",
      "offset": 725.92,
      "duration": 3.359
    },
    {
      "lang": "en",
      "text": "to generators, this might seem a little",
      "offset": 727.68,
      "duration": 3.599
    },
    {
      "lang": "en",
      "text": "bit weird, but basically, you define the",
      "offset": 729.279,
      "duration": 3.761
    },
    {
      "lang": "en",
      "text": "code here, and then it's only called for",
      "offset": 731.279,
      "duration": 3.601
    },
    {
      "lang": "en",
      "text": "each new value when we're going to grab",
      "offset": 733.04,
      "duration": 3.28
    },
    {
      "lang": "en",
      "text": "that that next value. But like I",
      "offset": 734.88,
      "duration": 3.12
    },
    {
      "lang": "en",
      "text": "mentioned, you've got map, you've also",
      "offset": 736.32,
      "duration": 4.319
    },
    {
      "lang": "en",
      "text": "got filter. There's also take, which we",
      "offset": 738,
      "duration": 4.48
    },
    {
      "lang": "en",
      "text": "don't have on arrays. But this is nice",
      "offset": 740.639,
      "duration": 3.841
    },
    {
      "lang": "en",
      "text": "because you can see for this generator,",
      "offset": 742.48,
      "duration": 3.76
    },
    {
      "lang": "en",
      "text": "it will just go forever, right? It says",
      "offset": 744.48,
      "duration": 3.52
    },
    {
      "lang": "en",
      "text": "while true, and it's just going to you",
      "offset": 746.24,
      "duration": 3.599
    },
    {
      "lang": "en",
      "text": "could just call next forever and ever to",
      "offset": 748,
      "duration": 3.6
    },
    {
      "lang": "en",
      "text": "get all of the natural numbers. But",
      "offset": 749.839,
      "duration": 3.361
    },
    {
      "lang": "en",
      "text": "let's say you want to stop at a certain",
      "offset": 751.6,
      "duration": 3.039
    },
    {
      "lang": "en",
      "text": "point. take three would make it so that",
      "offset": 753.2,
      "duration": 2.879
    },
    {
      "lang": "en",
      "text": "once this generator has been called",
      "offset": 754.639,
      "duration": 3.2
    },
    {
      "lang": "en",
      "text": "three times, it marks the iterator as",
      "offset": 756.079,
      "duration": 3.2
    },
    {
      "lang": "en",
      "text": "done, so we can't call it anymore. So,",
      "offset": 757.839,
      "duration": 2.881
    },
    {
      "lang": "en",
      "text": "this is super useful, especially if you",
      "offset": 759.279,
      "duration": 2.721
    },
    {
      "lang": "en",
      "text": "know that this thing runs forever, but",
      "offset": 760.72,
      "duration": 2.32
    },
    {
      "lang": "en",
      "text": "you want to limit it to a certain",
      "offset": 762,
      "duration": 2.639
    },
    {
      "lang": "en",
      "text": "amount. There's also drop, which will",
      "offset": 763.04,
      "duration": 3.2
    },
    {
      "lang": "en",
      "text": "skip a certain number of values at the",
      "offset": 764.639,
      "duration": 3.841
    },
    {
      "lang": "en",
      "text": "beginning. There's flat map, reduce. So,",
      "offset": 766.24,
      "duration": 3.36
    },
    {
      "lang": "en",
      "text": "all these things that you typically",
      "offset": 768.48,
      "duration": 2.4
    },
    {
      "lang": "en",
      "text": "would associate with being able to",
      "offset": 769.6,
      "duration": 3.679
    },
    {
      "lang": "en",
      "text": "modify arrays, you can now do with",
      "offset": 770.88,
      "duration": 4.48
    },
    {
      "lang": "en",
      "text": "iterators, and you can combine them. So,",
      "offset": 773.279,
      "duration": 3.921
    },
    {
      "lang": "en",
      "text": "you can do things like take five,",
      "offset": 775.36,
      "duration": 3.68
    },
    {
      "lang": "en",
      "text": "reduce, uh, and another really useful",
      "offset": 777.2,
      "duration": 3.759
    },
    {
      "lang": "en",
      "text": "one is to array. Okay, so in all of the",
      "offset": 779.04,
      "duration": 3.84
    },
    {
      "lang": "en",
      "text": "previous code examples, we had to call",
      "offset": 780.959,
      "duration": 4.161
    },
    {
      "lang": "en",
      "text": "next.ext.next.next.",
      "offset": 782.88,
      "duration": 4.24
    },
    {
      "lang": "en",
      "text": "But in this case, if I know that I only",
      "offset": 785.12,
      "duration": 3.68
    },
    {
      "lang": "en",
      "text": "need the first five values, and I'm",
      "offset": 787.12,
      "duration": 3.2
    },
    {
      "lang": "en",
      "text": "going to put it into an array anyways, I",
      "offset": 788.8,
      "duration": 3.839
    },
    {
      "lang": "en",
      "text": "can just call to array that instantly",
      "offset": 790.32,
      "duration": 4.079
    },
    {
      "lang": "en",
      "text": "calls the iterator, invokes it five",
      "offset": 792.639,
      "duration": 3.44
    },
    {
      "lang": "en",
      "text": "times, and then puts all of the results",
      "offset": 794.399,
      "duration": 3.521
    },
    {
      "lang": "en",
      "text": "into an array. So these are awesome. I",
      "offset": 796.079,
      "duration": 4.161
    },
    {
      "lang": "en",
      "text": "personally don't work with uh generator",
      "offset": 797.92,
      "duration": 4
    },
    {
      "lang": "en",
      "text": "functions in my own code, but if you're",
      "offset": 800.24,
      "duration": 3.2
    },
    {
      "lang": "en",
      "text": "dealing with certain libraries that",
      "offset": 801.92,
      "duration": 2.96
    },
    {
      "lang": "en",
      "text": "under the hood have code like this, or",
      "offset": 803.44,
      "duration": 2.56
    },
    {
      "lang": "en",
      "text": "maybe you're dealing with a library that",
      "offset": 804.88,
      "duration": 2.88
    },
    {
      "lang": "en",
      "text": "returns a stream of data, all these",
      "offset": 806,
      "duration": 3.279
    },
    {
      "lang": "en",
      "text": "functions will be super useful. And it",
      "offset": 807.76,
      "duration": 3.04
    },
    {
      "lang": "en",
      "text": "actually is very similar and reminds me",
      "offset": 809.279,
      "duration": 3.601
    },
    {
      "lang": "en",
      "text": "of Rx.js which is heavily used in the",
      "offset": 810.8,
      "duration": 3.76
    },
    {
      "lang": "en",
      "text": "world of Angular where you basically",
      "offset": 812.88,
      "duration": 3.28
    },
    {
      "lang": "en",
      "text": "have streams of data and you can perform",
      "offset": 814.56,
      "duration": 3.519
    },
    {
      "lang": "en",
      "text": "all these operations on the streams but",
      "offset": 816.16,
      "duration": 3.84
    },
    {
      "lang": "en",
      "text": "now we have this directly inside of",
      "offset": 818.079,
      "duration": 3.921
    },
    {
      "lang": "en",
      "text": "JavaScript. Now the last feature is one",
      "offset": 820,
      "duration": 4.88
    },
    {
      "lang": "en",
      "text": "that I probably won't use ever but uh",
      "offset": 822,
      "duration": 4.24
    },
    {
      "lang": "en",
      "text": "will be useful for some people that are",
      "offset": 824.88,
      "duration": 2.959
    },
    {
      "lang": "en",
      "text": "maybe doing some lower level coding and",
      "offset": 826.24,
      "duration": 4.159
    },
    {
      "lang": "en",
      "text": "it is the introduction of float 16",
      "offset": 827.839,
      "duration": 4.721
    },
    {
      "lang": "en",
      "text": "array. So before this in JavaScript you",
      "offset": 830.399,
      "duration": 3.841
    },
    {
      "lang": "en",
      "text": "could create a float 32 array and so",
      "offset": 832.56,
      "duration": 3.839
    },
    {
      "lang": "en",
      "text": "that's an array that holds 32-bit",
      "offset": 834.24,
      "duration": 4.159
    },
    {
      "lang": "en",
      "text": "floatingoint numbers. really big numbers",
      "offset": 836.399,
      "duration": 3.521
    },
    {
      "lang": "en",
      "text": "and you can hold that inside of arrays.",
      "offset": 838.399,
      "duration": 3.361
    },
    {
      "lang": "en",
      "text": "So, this is super useful if you're doing",
      "offset": 839.92,
      "duration": 4.08
    },
    {
      "lang": "en",
      "text": "things that are like graphics related,",
      "offset": 841.76,
      "duration": 4.319
    },
    {
      "lang": "en",
      "text": "but also these days if you're doing",
      "offset": 844,
      "duration": 4.959
    },
    {
      "lang": "en",
      "text": "things that are like AI related, like",
      "offset": 846.079,
      "duration": 4.401
    },
    {
      "lang": "en",
      "text": "matrix multiplication and stuff like",
      "offset": 848.959,
      "duration": 3.041
    },
    {
      "lang": "en",
      "text": "that, sometimes you need to hold on to",
      "offset": 850.48,
      "duration": 3.599
    },
    {
      "lang": "en",
      "text": "some really big numbers. And before the",
      "offset": 852,
      "duration": 3.92
    },
    {
      "lang": "en",
      "text": "introduction of this, we only had 32-bit",
      "offset": 854.079,
      "duration": 3.76
    },
    {
      "lang": "en",
      "text": "floatingoint numbers. And if you needed",
      "offset": 855.92,
      "duration": 4.479
    },
    {
      "lang": "en",
      "text": "a 16- bit number, you had to manually",
      "offset": 857.839,
      "duration": 4.481
    },
    {
      "lang": "en",
      "text": "convert it or install a library to do",
      "offset": 860.399,
      "duration": 4.721
    },
    {
      "lang": "en",
      "text": "it. But now we can directly create",
      "offset": 862.32,
      "duration": 5.36
    },
    {
      "lang": "en",
      "text": "arrays of float 16 values. And the other",
      "offset": 865.12,
      "duration": 3.92
    },
    {
      "lang": "en",
      "text": "aspect here is it introduces some",
      "offset": 867.68,
      "duration": 3.36
    },
    {
      "lang": "en",
      "text": "methods on data view. So data view is an",
      "offset": 869.04,
      "duration": 3.52
    },
    {
      "lang": "en",
      "text": "object in JavaScript for working with",
      "offset": 871.04,
      "duration": 4.56
    },
    {
      "lang": "en",
      "text": "these arrays of numbers. And now it has",
      "offset": 872.56,
      "duration": 5.2
    },
    {
      "lang": "en",
      "text": "methods on it called get float 16 or set",
      "offset": 875.6,
      "duration": 4.239
    },
    {
      "lang": "en",
      "text": "float 16. Whereas before it only worked",
      "offset": 877.76,
      "duration": 4
    },
    {
      "lang": "en",
      "text": "with 32-bit values. So like I said, I",
      "offset": 879.839,
      "duration": 3.201
    },
    {
      "lang": "en",
      "text": "probably won't use this as much, but you",
      "offset": 881.76,
      "duration": 3.12
    },
    {
      "lang": "en",
      "text": "can bet that a lot of these graphics",
      "offset": 883.04,
      "duration": 3.599
    },
    {
      "lang": "en",
      "text": "focused libraries or maybe AI related",
      "offset": 884.88,
      "duration": 2.8
    },
    {
      "lang": "en",
      "text": "libraries are going to be using this",
      "offset": 886.639,
      "duration": 2.241
    },
    {
      "lang": "en",
      "text": "under the hood. So that's it for all the",
      "offset": 887.68,
      "duration": 3.2
    },
    {
      "lang": "en",
      "text": "new features in ES 2025. But I'd love to",
      "offset": 888.88,
      "duration": 3.44
    },
    {
      "lang": "en",
      "text": "know which of these features are you",
      "offset": 890.88,
      "duration": 2.88
    },
    {
      "lang": "en",
      "text": "already using? Which of these features",
      "offset": 892.32,
      "duration": 3.04
    },
    {
      "lang": "en",
      "text": "are you excited about? Which of these",
      "offset": 893.76,
      "duration": 2.8
    },
    {
      "lang": "en",
      "text": "features do you think should have been",
      "offset": 895.36,
      "duration": 2.88
    },
    {
      "lang": "en",
      "text": "added to the language years ago? Let me",
      "offset": 896.56,
      "duration": 3.2
    },
    {
      "lang": "en",
      "text": "know down in the comments. That's all I",
      "offset": 898.24,
      "duration": 3.599
    },
    {
      "lang": "en",
      "text": "have for this. I will see you in the",
      "offset": 899.76,
      "duration": 5.24
    },
    {
      "lang": "en",
      "text": "next one.",
      "offset": 901.839,
      "duration": 3.161
    },
    {
      "lang": "en",
      "text": "[Music]",
      "offset": 908.15,
      "duration": 16.099
    }
  ],
  "cleanText": "ECMAScript is the standard that defines how the JavaScript language works.\nIt tells us what features should exist, how JavaScript should behave in certain scenarios, what does the syntax look like.\nIt standardizes all of that.\nAnd every year, the TC39 committee introduces a new version of the specification that introduces new features to the language.\nAnd this year is no different.\nIn this video, I'm going to walk you through the nine new features that have been added to ECMAScript for the 2025 release of the standard.\nIf that sounds good to you, let's dive in.\nMy name is CJ.\nWelcome to Syntax.\n[Music]\nSo, if you take a look at all of the previous versions of ECMAScript, you can see that in modern history, they release a new version of the standard every year in June.\nAnd essentially any proposal that has made it to stage 4 before this release of the standard in June will be included in that new version of ECMAScript.\nAnd so, this is where I got all of this information.\nAnd if you take a look at that same proposals repo, there's a file called finished proposals.\nAnd this is a table of every single feature added to the language and the year that it was finalized.\nSo in this table, everything that was finalized to be published in the year 2025 is what we're going to be looking at today.\nNow the first feature is Promise.try.\nAnd this is useful if you are dealing potentially with functions or libraries from functions that may not return a promise, but maybe sometimes return a promise.\nYou can see that it's baseline 2025 available.\nIt's in all the major browser engines.\nAnd essentially, you would want to use this in a scenario where maybe you have a function that doesn't return a promise and you want to like instantly resolve it.\nThis is how you might have done it before, but now with Promise.try, you can just pass the function in directly.\nAnd it's important to note that this is not equivalent to promise.resolve and then passing the function in because this will actually behave asynchronously and this function call will be put into the microtask queue.\nWhereas with Promise.try, if this is a synchronous function, it will just be called synchronously.\nAnd you can see this a little bit better in this example.\nSo this do something function takes in any kind of function.\nThat function could return a promise or it could just be a regular plain old function.\nAnd we can call it with regular functions, functions that throw or async functions.\nSo these are functions that return a promise.\nBut by passing that into Promise.try, we get a consistent behavior.\nSo we know that we can use a dot then on it.\nWe don't have to check to see like if it is a promise.\nSo, this seems super useful, especially if working like with legacy code bases or libraries maybe that are like callback based that haven't really migrated to promises yet.\nI honestly don't see myself using this as much because most of the time if you're in control of the code, you could just put the async keyword on a function, especially if it has like an early return that isn't awaiting a promise, but then maybe later on it does need to return a promise.\nPutting the async keyword on there means if this function immediately returns, it's still technically returning a promise.\nSo, I don't really see myself reaching for this anytime soon, but you might actually find a use case for this in your codebase.\nNow, the next set of features are actually seven methods that have been added to the Set prototype.\nSo, a Set is a data structure that allows us to only have unique items in a collection.\nAnd you can create a Set by passing in an array.\nSo, if you have an array that potentially has duplicate strings in it, you can pass it into a Set.\nThat Set will actually remove those duplicates.\nBut these methods make it really useful to perform operations between two sets.\nAnd if you check out the MDN page, they have some nice vin diagrams that show what these methods actually do.\nAnd these methods come from the world of mathematics because there's a thing called set theory.\nAnd in mathematics, we work with sets.\nAnd all of these method names are from mathematics: difference, intersection, symmetric difference, union, is disjoint from, is subset of.\nBut if you look at these vin diagrams, it gives you a good picture of what happens when you perform this operation on two sets.\nAnd to really see where this is useful, I have some examples where we're just using some JavaScript arrays.\nSo in this example, we're doing some access control.\nSo let's say we have a list of users that are active in the system and then a list of users that are admins.\nIf I want to figure out which of the admins are active, we could do like a filter.\nSo take all of the active users and then filter any out that are admins.\nAnd then if I want to do the reverse of that, I could take all the active users and filter out the ones that are not admins.\nAnd then similarly, if I want to find all the admins that are active, I could say give me all the admin users where every single one is in the active user array.\nSo these are kind of two different ways to get the admins that are active.\nBut you might have come across some code like this in a codebase and um it takes a second for you to kind of understand what's happening.\nBut if we were to use Set methods, the active admins are just an intersection of the active users and the admin users.\nThe non-admins is the difference between the active users and the admin users.\nAnd active admins is also where admin users is a subset of active users.\nNow again, these two things are basically doing the same thing.\nIt's just in the other direction.\nUh but if you find yourself doing a lot of array comparison in your app, you could potentially benefit from these Set methods by just turning your arrays into sets.\nAnother example of this is synchronizing some data.\nSo maybe you have some data locally and then you also have some data that's coming from a server and you want to know what are the new items that I don't currently have locally.\nSo you might take all the local items, filter out the ones that the remote does not have, and then you know those are the new ones.\nSimilarly, in the remote list, if things have been removed, you might want to filter out the ones that are no longer in there.\nYou might also want to figure out for common items which ones are both local and remote.\nAnd then you might also want to know which ones are completely different from your local and remote array.\nBut again, trying to read all of this code takes a lot of brain power.\nIf we use Set methods, it's a lot more straightforward.\nSo the items to add is just the difference between the local items and the remote items.\nThe items to remove is the difference between the remote items and the local items.\nThe common items is the intersection between local and remote.\nAnd we can find the difference between the sets by using local items is disjoint from remote items.\nSo these methods take some getting used to, but the code is a lot nicer to read instead of having to figure out all these like filters uh and different things like that that you might be doing in your codebase.\nNext up, there are three features that have been added to regular expressions.\nThe first one being RegExp.escape.\nSo this adds a method to the global RegExp object where you can pass in a string that might have things that are like special characters in regular expressions and it will automatically escape them for you.\nSo for instance, if you pass in this sentence that says buy it, use it, break it, fix it.\nThese periods, if you didn't escape them, would be interpreted as the regular expression token that matches on anything.\nBut let's say you're dealing with some user provided data, like maybe a user types into a search form and then you want to pass that into a regular expression.\nTypically, you had to reach for a library or manually write some code that would find all the characters that might be interpreted as regular expression tokens and then escape them.\nRegExp.escape does this automatically.\nSo, this is something that people have been asking for for a very long time.\nNow, you don't have to install a separate library.\nIt's super easy to just take some user provided input, escape it, and then pass it into a regular expression.\nThe next regular expression feature is called regular expression pattern modifiers.\nSo, pattern modifiers already exist.\nSo for instance, you can create a regular expression and then pass in I on the end of it and this will be a case insensitive regular expression.\nIf you look on MDN, they have all the various flags you can pass in.\nYou could do G for a global search.\nYou could do M for a multi-line search or use S that will allow periods to match on newline characters.\nSo there's several different flags that you can pass in.\nBut what the modifiers feature allows us to do is pass in these global flags that will be applied to the whole regular expression, but then within the regular expression, we can disable some of those flags.\nSo this whole expression is case insensitive but for this one matching group it is not case sensitive meaning the second match here has to be lowercase a toz instead of also including uppercases and similarly if you don't have a flag on the end here you can just make a subsection of your regular expression be case insensitive.\nSo this is really nice.\nBefore you used to have to create like multiple regular expressions or get much more specific with how you define the matching groups, but with this you can take an existing one and just turn off or turn on those modifiers inside of groups.\nAnd the last feature added to regular expressions is duplicate named capturing groups.\nNow you might not know this, but you can actually create named groups inside of your regular expression.\nSo this regular expression says if you match four digits at the beginning of this incoming string that's going to be in a group called year and then after that we're matching two more digits or we might see two digits four digits.\nSo this is a regular expression that would match on dates either the four-digit year- the month or the month dash the four-digit year.\nAnd in this case you can see that we're putting a group name on the year here.\nBut before this feature was added this would actually throw a syntax error because we had the group year repeated twice.\nAnd if you look on the MDN page, it actually hasn't been updated for the latest spec yet because there is this caveat here that says all names must be unique within the same pattern.\nMultiple named capturing groups with the same name would result in a syntax error.\nSo right now, if you were to run this code on a JavaScript engine that hasn't been updated yet, this wouldn't even work because we have the word year twice.\nBut now with this new addition, we can use the same capture group name in multiple places inside of a regular expression.\nNow, these next two features deal with importing things into our JavaScript codes.\nAnd it was originally just a single proposal, but it's actually been broken out into two.\nSo, import attributes you might have seen, especially if you've worked in TypeScript code, where you want to import a JSON file and then you use the with assertion.\nThis actually formally adds it to the JavaScript language.\nAnd it also works with dynamic imports.\nEssentially, we can pass in the options there.\nBut where this is really interesting is supporting things beyond JSON.\nSo this formalizes the syntax and we also have the proposal that specifically allows for JSON modules and all of the engines now support type of JSON.\nBut this sets us up so that in the future we could have type CSS or type HTML.\nAnd so imagine being able to import like an HTML partial and using it in your JavaScript code or being able to import CSS modules directly into JavaScript code without the need of a bundler.\nNow this was new to me but importing CSS actually works inside of Chrome browser right now.\nNow, if you look on the MDN page, they have this example where you import a stylesheet from a URL with type CSS.\nNow, I tried running this inside of Firefox.\nIt says invalid module type, but in Chrome, this actually works.\nSo, I have some example codes here.\nI just have an HTML file.\nI'm bringing in this JavaScript file as type module.\nAnd then I have a div with a class of card on the page.\nAnd then in my JavaScript, I'm importing this style file.\nI'm also importing a JSON file.\nIt's just a little object with a message hello world.\nAnd then in order to apply these styles to the document, we have to use the adopted stylesheets property on the document and add those styles to it.\nAnd then now that I pulled that data in as well, I'm actually updating the text content on the page.\nAnd if we look at the styles, it's just some standard CSS.\nSo I set up light and dark mode and then style this card appropriately.\nBut when this code runs, you can see that it actually adds those styles to the page.\nNow, where I see this being very useful is with things like web components.\nSo in this case, I'm adding the styles to the entire page, but this also works with the shadowdom.\nSo you could potentially import a CSS file like this and then add it directly to the shadowdom of a web component.\nNow, like I mentioned, type CSS is only supported inside of Chrome right now, but eventually once this is supported in a lot more places, we'll have much more modular code that's starting to look a lot like the kind of code you can write when you have a bundler.\nThe next new feature is iterator helpers.\nSo iterators in JavaScript are this little star syntax in the yield syntax.\nSo the these are generators and essentially they're functions that can return multiple values.\nAnd so if you haven't seen these before, the way it would work is you could invoke this function but this gives you back an iterator and then that iterator if you want to get the next value that is yielded you call next.\nSo the first time you call naturals you would get zero and then if you call next you would get one and then if you call next you would get two etc.\nBut these iterator helpers basically give us map, filter, reduce, all the things that you're used to using on arrays, you can now use on iterators.\nSo in this case, we add map to this iterator here.\nAnd now instead of just returning 1 2 3 4, we're returning the value multiplied by itself.\nAnd what's nice about this is because it's an iterator, this map isn't going to just run all at once.\nEssentially, when you call next, that's when it will evaluate that map function for the value that it's about to provide.\nSo, if you're new to generators, this might seem a little bit weird, but basically, you define the code here, and then it's only called for each new value when we're going to grab that that next value.\nBut like I mentioned, you've got map, you've also got filter.\nThere's also take, which we don't have on arrays.\nBut this is nice because you can see for this generator, it will just go forever, right?\nIt says while\n\n\nTrue, and it's just going to you.\nYou could just call next forever and ever to get all of the natural numbers.\nBut let's say you want to stop at a certain point.\nTake three would make it so that once this generator has been called three times, it marks the iterator as done, so we can't call it anymore.\nSo, this is super useful, especially if you know that this thing runs forever, but you want to limit it to a certain amount.\nThere's also drop, which will skip a certain number of values at the beginning.\nThere's flat map, reduce.\nSo, all these things that you typically would associate with being able to modify arrays, you can now do with iterators, and you can combine them.\nSo, you can do things like take five, reduce, uh, and another really useful one is to array.\nOkay, so in all of the previous code examples, we had to call next.ext.next.next.\nBut in this case, if I know that I only need the first five values, and I'm going to put it into an array anyways, I can just call to array that instantly calls the iterator, invokes it five times, and then puts all of the results into an array.\nSo these are awesome.\nI personally don't work with uh generator functions in my own code, but if you're dealing with certain libraries that under the hood have code like this, or maybe you're dealing with a library that returns a stream of data, all these functions will be super useful.\nAnd it actually is very similar and reminds me of Rx.js which is heavily used in the world of Angular where you basically have streams of data and you can perform all these operations on the streams but now we have this directly inside of JavaScript.\nNow the last feature is one that I probably won't use ever but uh will be useful for some people that are maybe doing some lower level coding and it is the introduction of Float16Array.\nSo before this in JavaScript you could create a float 32 array and so that's an array that holds 32-bit floatingoint numbers.\nReally big numbers and you can hold that inside of arrays.\nSo, this is super useful if you're doing things that are like graphics related, but also these days if you're doing things that are like AI related, like matrix multiplication and stuff like that, sometimes you need to hold on to some really big numbers.\nAnd before the introduction of this, we only had 32-bit floatingoint numbers.\nAnd if you needed a 16- bit number, you had to manually convert it or install a library to do it.\nBut now we can directly create arrays of float 16 values.\nAnd the other aspect here is it introduces some methods on data view.\nSo data view is an object in JavaScript for working with these arrays of numbers.\nAnd now it has methods on it called get float 16 or set float 16.\nWhereas before it only worked with 32-bit values.\nSo like I said, I probably won't use this as much, but you can bet that a lot of these graphics focused libraries or maybe AI related libraries are going to be using this under the hood.\nSo that's it for all the new features in ES2025.\nBut I'd love to know which of these features are you already using?\nWhich of these features are you excited about?\nWhich of these features do you think should have been added to the language years ago?\nLet me know down in the comments.\nThat's all I have for this.\nI will see you in the next one.\n[Music]\n",
  "dumpedAt": "2025-07-21T18:43:26.231Z"
}