{
  "episodeId": "etX8_ibVuNk",
  "channelSlug": "@syntaxfm",
  "title": "Can You Reverse Engineer Code? Clash of Code: Reverse Mode!",
  "publishedAt": "2025-07-04T15:02:53.000Z",
  "rawLines": [
    {
      "lang": "en",
      "text": "Welcome to another Clash of Code. In",
      "offset": 0.08,
      "duration": 4.56
    },
    {
      "lang": "en",
      "text": "this video, all three of us are going to",
      "offset": 2.96,
      "duration": 3.6
    },
    {
      "lang": "en",
      "text": "compete to solve these JavaScript",
      "offset": 4.64,
      "duration": 4.32
    },
    {
      "lang": "en",
      "text": "problems, but with a twist. Today is",
      "offset": 6.56,
      "duration": 4.56
    },
    {
      "lang": "en",
      "text": "reverse mode. So, there will be no",
      "offset": 8.96,
      "duration": 4.559
    },
    {
      "lang": "en",
      "text": "problem description. All we'll see are",
      "offset": 11.12,
      "duration": 4
    },
    {
      "lang": "en",
      "text": "inputs and outputs, and we have to",
      "offset": 13.519,
      "duration": 4.161
    },
    {
      "lang": "en",
      "text": "figure out what code to write to get",
      "offset": 15.12,
      "duration": 4.56
    },
    {
      "lang": "en",
      "text": "that output given those inputs. Is",
      "offset": 17.68,
      "duration": 3.599
    },
    {
      "lang": "en",
      "text": "everyone ready?\n Oh, I'm ready.\n All",
      "offset": 19.68,
      "duration": 3.839
    },
    {
      "lang": "en",
      "text": "right, I'm ready. Nice. Let's do it.",
      "offset": 21.279,
      "duration": 4
    },
    {
      "lang": "en",
      "text": "This game in reverse mode, expected",
      "offset": 23.519,
      "duration": 4
    },
    {
      "lang": "en",
      "text": "input, expected output. You input one,",
      "offset": 25.279,
      "duration": 3.84
    },
    {
      "lang": "en",
      "text": "you get 1 through 10. And then this",
      "offset": 27.519,
      "duration": 5.121
    },
    {
      "lang": "en",
      "text": "input gives us 21 and it's 21 42 63 84.",
      "offset": 29.119,
      "duration": 6.481
    },
    {
      "lang": "en",
      "text": "So it's increasing by 21 each time. I",
      "offset": 32.64,
      "duration": 4
    },
    {
      "lang": "en",
      "text": "think that's what we need to do. And",
      "offset": 35.6,
      "duration": 3.04
    },
    {
      "lang": "en",
      "text": "then we do it 10 times. So take the",
      "offset": 36.64,
      "duration": 5.12
    },
    {
      "lang": "en",
      "text": "number, repeat it 10 times, multiply and",
      "offset": 38.64,
      "duration": 6.48
    },
    {
      "lang": "en",
      "text": "add it to itself that many times. So I",
      "offset": 41.76,
      "duration": 4.56
    },
    {
      "lang": "en",
      "text": "guess it would be multiplied. So what if",
      "offset": 45.12,
      "duration": 4.08
    },
    {
      "lang": "en",
      "text": "I did uh array from and then we give it",
      "offset": 46.32,
      "duration": 8.48
    },
    {
      "lang": "en",
      "text": "a length of 10 and then for each element",
      "offset": 49.2,
      "duration": 8.72
    },
    {
      "lang": "en",
      "text": "we take i + 1 which is going to be 1 2 3",
      "offset": 54.8,
      "duration": 6.96
    },
    {
      "lang": "en",
      "text": "4 5 6 7 8 9 10 and multiply it times the",
      "offset": 57.92,
      "duration": 8.32
    },
    {
      "lang": "en",
      "text": "input 7 8 9 there's always 10. Okay, so",
      "offset": 61.76,
      "duration": 10.16
    },
    {
      "lang": "en",
      "text": "we basically take in n console",
      "offset": 66.24,
      "duration": 9.6
    },
    {
      "lang": "en",
      "text": "error is how you take what n is. n is",
      "offset": 71.92,
      "duration": 7.6
    },
    {
      "lang": "en",
      "text": "one. Okay, so we want to make a new",
      "offset": 75.84,
      "duration": 6.8
    },
    {
      "lang": "en",
      "text": "array of 10 items.",
      "offset": 79.52,
      "duration": 10.239
    },
    {
      "lang": "en",
      "text": "So array from with a length of 10. Then",
      "offset": 82.64,
      "duration": 9.519
    },
    {
      "lang": "en",
      "text": "we are going to",
      "offset": 89.759,
      "duration": 6.32
    },
    {
      "lang": "en",
      "text": "have a map. So we don't care about the",
      "offset": 92.159,
      "duration": 6.721
    },
    {
      "lang": "en",
      "text": "first item because it's empty",
      "offset": 96.079,
      "duration": 5.841
    },
    {
      "lang": "en",
      "text": "and then we want the index",
      "offset": 98.88,
      "duration": 7.84
    },
    {
      "lang": "en",
      "text": "from that we will return the index times",
      "offset": 101.92,
      "duration": 12.239
    },
    {
      "lang": "en",
      "text": "n. So we can do a four um i= 0 i is less",
      "offset": 106.72,
      "duration": 10.399
    },
    {
      "lang": "en",
      "text": "than 10 and then i should be less than",
      "offset": 114.159,
      "duration": 6.24
    },
    {
      "lang": "en",
      "text": "or equal to 10. Oh no I is zero. Um,",
      "offset": 117.119,
      "duration": 6.64
    },
    {
      "lang": "en",
      "text": "let's start I at one",
      "offset": 120.399,
      "duration": 6.161
    },
    {
      "lang": "en",
      "text": "cuz we're just multiplying it by Yeah,",
      "offset": 123.759,
      "duration": 5.761
    },
    {
      "lang": "en",
      "text": "we're I should be one. Okay, we'll log",
      "offset": 126.56,
      "duration": 5.52
    },
    {
      "lang": "en",
      "text": "this all out uh by joining it together",
      "offset": 129.52,
      "duration": 4.799
    },
    {
      "lang": "en",
      "text": "on a space. I think I think that should",
      "offset": 132.08,
      "duration": 3.6
    },
    {
      "lang": "en",
      "text": "do it if I didn't do anything crazy.",
      "offset": 134.319,
      "duration": 4.401
    },
    {
      "lang": "en",
      "text": "Let's try it. Yes. No. Okay. Oh, I see.",
      "offset": 135.68,
      "duration": 6.88
    },
    {
      "lang": "en",
      "text": "I need to do I + 1 times in in",
      "offset": 138.72,
      "duration": 5.44
    },
    {
      "lang": "en",
      "text": "parenthesis order of operation counts.",
      "offset": 142.56,
      "duration": 4.72
    },
    {
      "lang": "en",
      "text": "Yes. Okay, this is it. Sick.",
      "offset": 144.16,
      "duration": 6.96
    },
    {
      "lang": "en",
      "text": "console dot constancer",
      "offset": 147.28,
      "duration": 6.239
    },
    {
      "lang": "en",
      "text": "is equal to",
      "offset": 151.12,
      "duration": 6.36
    },
    {
      "lang": "en",
      "text": "console log answer",
      "offset": 153.519,
      "duration": 3.961
    },
    {
      "lang": "en",
      "text": "[Laughter]",
      "offset": 158.62,
      "duration": 6.259
    },
    {
      "lang": "en",
      "text": "standard output stream nojs version 20.",
      "offset": 160.72,
      "duration": 6.64
    },
    {
      "lang": "en",
      "text": "What the hell did I do? N is not",
      "offset": 164.879,
      "duration": 5.201
    },
    {
      "lang": "en",
      "text": "defined. Why? Oh, it's a capital who is",
      "offset": 167.36,
      "duration": 5.2
    },
    {
      "lang": "en",
      "text": "a capital N. That's stupid. I guess I do",
      "offset": 170.08,
      "duration": 6.72
    },
    {
      "lang": "en",
      "text": "want to take this and turn it into a",
      "offset": 172.56,
      "duration": 11.36
    },
    {
      "lang": "en",
      "text": "variable here. So, a equals print a * i",
      "offset": 176.8,
      "duration": 9.12
    },
    {
      "lang": "en",
      "text": "and then",
      "offset": 183.92,
      "duration": 4.16
    },
    {
      "lang": "en",
      "text": "um no, I don't want to submit my code. I",
      "offset": 185.92,
      "duration": 4.319
    },
    {
      "lang": "en",
      "text": "want to play out test cases. Um, found",
      "offset": 188.08,
      "duration": 6
    },
    {
      "lang": "en",
      "text": "nothing. We basically are off by one.",
      "offset": 190.239,
      "duration": 8.321
    },
    {
      "lang": "en",
      "text": "So, I + 1",
      "offset": 194.08,
      "duration": 10.159
    },
    {
      "lang": "en",
      "text": "* n. Okay. And then we simply join with",
      "offset": 198.56,
      "duration": 8
    },
    {
      "lang": "en",
      "text": "a space.",
      "offset": 204.239,
      "duration": 5.28
    },
    {
      "lang": "en",
      "text": "Good. Play all test cases.",
      "offset": 206.56,
      "duration": 4.8
    },
    {
      "lang": "en",
      "text": "Uhoh. Okay. So clearly I'm doing",
      "offset": 209.519,
      "duration": 7.44
    },
    {
      "lang": "en",
      "text": "something stupid. So var a parse int for",
      "offset": 211.36,
      "duration": 8.56
    },
    {
      "lang": "en",
      "text": "i.",
      "offset": 216.959,
      "duration": 6
    },
    {
      "lang": "en",
      "text": "Oh, it's always going to be that. So we",
      "offset": 219.92,
      "duration": 4.319
    },
    {
      "lang": "en",
      "text": "don't want it to go once. We want it to",
      "offset": 222.959,
      "duration": 3.84
    },
    {
      "lang": "en",
      "text": "go 10 times.\n I'm getting 21. So, I",
      "offset": 224.239,
      "duration": 6.64
    },
    {
      "lang": "en",
      "text": "basically want to return times I want.",
      "offset": 226.799,
      "duration": 7.121
    },
    {
      "lang": "en",
      "text": "That's what I did.",
      "offset": 230.879,
      "duration": 5.601
    },
    {
      "lang": "en",
      "text": "Success.",
      "offset": 233.92,
      "duration": 6.16
    },
    {
      "lang": "en",
      "text": "Submit. Got it. Damn, CJ. A minute and a",
      "offset": 236.48,
      "duration": 6.64
    },
    {
      "lang": "en",
      "text": "bit. Yeah,\n this is stupid. It's",
      "offset": 240.08,
      "duration": 5.519
    },
    {
      "lang": "en",
      "text": "expecting to have them all as like a um",
      "offset": 243.12,
      "duration": 4.8
    },
    {
      "lang": "en",
      "text": "string maybe. I don't know why it's like",
      "offset": 245.599,
      "duration": 4.161
    },
    {
      "lang": "en",
      "text": "asking to concatenate them all or",
      "offset": 247.92,
      "duration": 3.12
    },
    {
      "lang": "en",
      "text": "something.\n I really wanted to do some",
      "offset": 249.76,
      "duration": 3.52
    },
    {
      "lang": "en",
      "text": "like short, but I wasn't trying to make",
      "offset": 251.04,
      "duration": 4
    },
    {
      "lang": "en",
      "text": "it as short as possible. Right. It's",
      "offset": 253.28,
      "duration": 4.799
    },
    {
      "lang": "en",
      "text": "kind of nice. be just like doing it as",
      "offset": 255.04,
      "duration": 4.879
    },
    {
      "lang": "en",
      "text": "fast as possible.\n Just solve it. What?",
      "offset": 258.079,
      "duration": 5.601
    },
    {
      "lang": "en",
      "text": "Whatever it takes.\n Yeah. Um",
      "offset": 259.919,
      "duration": 6.161
    },
    {
      "lang": "en",
      "text": "Oh, because it's plus a print statement.",
      "offset": 263.68,
      "duration": 4
    },
    {
      "lang": "en",
      "text": "Folks, you'll have to forgive me. I'm",
      "offset": 266.08,
      "duration": 3.04
    },
    {
      "lang": "en",
      "text": "simultaneously trying to solve the",
      "offset": 267.68,
      "duration": 3.76
    },
    {
      "lang": "en",
      "text": "problem and optimize as I go, which like",
      "offset": 269.12,
      "duration": 4.96
    },
    {
      "lang": "en",
      "text": "is not my thing. That's the read line",
      "offset": 271.44,
      "duration": 6.24
    },
    {
      "lang": "en",
      "text": "business. Where am I using a\n Did he get",
      "offset": 274.08,
      "duration": 4.96
    },
    {
      "lang": "en",
      "text": "it though?\n Will that work?\n Yeah, he's",
      "offset": 277.68,
      "duration": 2.799
    },
    {
      "lang": "en",
      "text": "done. He just doesn't He just needs to",
      "offset": 279.04,
      "duration": 5.52
    },
    {
      "lang": "en",
      "text": "Okay, perfect.\n Scott. Scott,",
      "offset": 280.479,
      "duration": 6
    },
    {
      "lang": "en",
      "text": "what? But we had a time limit.\n No, no,",
      "offset": 284.56,
      "duration": 3.6
    },
    {
      "lang": "en",
      "text": "just submit.",
      "offset": 286.479,
      "duration": 2.881
    },
    {
      "lang": "en",
      "text": "Yeah, you don't need to shorten it.\n Did",
      "offset": 288.16,
      "duration": 3.28
    },
    {
      "lang": "en",
      "text": "you Did you get it?\n No, I thought it was",
      "offset": 289.36,
      "duration": 4.16
    },
    {
      "lang": "en",
      "text": "I thought it was shortest.\n No, no, no.",
      "offset": 291.44,
      "duration": 3.12
    },
    {
      "lang": "en",
      "text": "Just submit when you're done. When",
      "offset": 293.52,
      "duration": 2.239
    },
    {
      "lang": "en",
      "text": "you're ready.\n I thought it was shortest",
      "offset": 294.56,
      "duration": 4.88
    },
    {
      "lang": "en",
      "text": "and fastest.\n I was going for shortest.",
      "offset": 295.759,
      "duration": 6.321
    },
    {
      "lang": "en",
      "text": "It's only uh\n I could have got I got that",
      "offset": 299.44,
      "duration": 3.84
    },
    {
      "lang": "en",
      "text": "way faster. I was just going for",
      "offset": 302.08,
      "duration": 3.92
    },
    {
      "lang": "en",
      "text": "shortest. A\n Yeah, that's okay.\n I",
      "offset": 303.28,
      "duration": 4.32
    },
    {
      "lang": "en",
      "text": "was optimizing it. All right, I'll share",
      "offset": 306,
      "duration": 4
    },
    {
      "lang": "en",
      "text": "my code first. All right, share my code.",
      "offset": 307.6,
      "duration": 3.84
    },
    {
      "lang": "en",
      "text": "Uh you can look at my code. But it might",
      "offset": 310,
      "duration": 3.44
    },
    {
      "lang": "en",
      "text": "not even be the shortest, but it is",
      "offset": 311.44,
      "duration": 3.759
    },
    {
      "lang": "en",
      "text": "short cuz I was trying to get it very",
      "offset": 313.44,
      "duration": 4.56
    },
    {
      "lang": "en",
      "text": "short. I just Yeah, I read the line. I",
      "offset": 315.199,
      "duration": 4.321
    },
    {
      "lang": "en",
      "text": "made an array. I pushed it and then I",
      "offset": 318,
      "duration": 3.52
    },
    {
      "lang": "en",
      "text": "joined it.\n Nice. You started your for",
      "offset": 319.52,
      "duration": 3.84
    },
    {
      "lang": "en",
      "text": "loop at one up to 11. But I guess that",
      "offset": 321.52,
      "duration": 2.72
    },
    {
      "lang": "en",
      "text": "makes sense cuz then you didn't have to",
      "offset": 323.36,
      "duration": 3.119
    },
    {
      "lang": "en",
      "text": "do I plus one.\n Oh, that's the move.",
      "offset": 324.24,
      "duration": 4.08
    },
    {
      "lang": "en",
      "text": "Yeah.\n None of the none of the rest is",
      "offset": 326.479,
      "duration": 3.921
    },
    {
      "lang": "en",
      "text": "the move though.\n Well, I was going for",
      "offset": 328.32,
      "duration": 5.2
    },
    {
      "lang": "en",
      "text": "shortest.\n Yeah, that's true.\n Yeah.\n Okay.",
      "offset": 330.4,
      "duration": 5.04
    },
    {
      "lang": "en",
      "text": "Mine. All right.\n It is exactly the same",
      "offset": 333.52,
      "duration": 5.92
    },
    {
      "lang": "en",
      "text": "as what I did. So, uh,\n make an array.",
      "offset": 335.44,
      "duration": 5.36
    },
    {
      "lang": "en",
      "text": "Array from Yeah.",
      "offset": 339.44,
      "duration": 3.36
    },
    {
      "lang": "en",
      "text": "is a good trick.\n And then you the",
      "offset": 340.8,
      "duration": 4.8
    },
    {
      "lang": "en",
      "text": "underscore is throws out the first",
      "offset": 342.8,
      "duration": 5.119
    },
    {
      "lang": "en",
      "text": "argument because when you are mapping",
      "offset": 345.6,
      "duration": 4.24
    },
    {
      "lang": "en",
      "text": "over an array with nothing in it, you",
      "offset": 347.919,
      "duration": 4
    },
    {
      "lang": "en",
      "text": "have to get to the index value. So you",
      "offset": 349.84,
      "duration": 3.68
    },
    {
      "lang": "en",
      "text": "use underscore just to kind of throw it",
      "offset": 351.919,
      "duration": 4.641
    },
    {
      "lang": "en",
      "text": "away. Uh and then you return I I had it",
      "offset": 353.52,
      "duration": 4.8
    },
    {
      "lang": "en",
      "text": "way faster, but I forgot about my",
      "offset": 356.56,
      "duration": 3.76
    },
    {
      "lang": "en",
      "text": "parenthesis and it was goofing up. It",
      "offset": 358.32,
      "duration": 4.4
    },
    {
      "lang": "en",
      "text": "was adding the one first.\n Yeah.\n How was",
      "offset": 360.32,
      "duration": 3.52
    },
    {
      "lang": "en",
      "text": "How did I miss that? It was supposed to",
      "offset": 362.72,
      "duration": 4.64
    },
    {
      "lang": "en",
      "text": "be fastest. I'm so confused.",
      "offset": 363.84,
      "duration": 5.84
    },
    {
      "lang": "en",
      "text": "just re-watch the intro and I don't I",
      "offset": 367.36,
      "duration": 3.92
    },
    {
      "lang": "en",
      "text": "don't know. But uh yeah, I solved it the",
      "offset": 369.68,
      "duration": 2.799
    },
    {
      "lang": "en",
      "text": "same way and I had the exact same",
      "offset": 371.28,
      "duration": 3.52
    },
    {
      "lang": "en",
      "text": "problem as Wes. I just basically",
      "offset": 372.479,
      "duration": 4.801
    },
    {
      "lang": "en",
      "text": "condensed his run in half. I also did",
      "offset": 374.8,
      "duration": 4.16
    },
    {
      "lang": "en",
      "text": "number times in instead of in times",
      "offset": 377.28,
      "duration": 2.96
    },
    {
      "lang": "en",
      "text": "number. That's like the only difference.",
      "offset": 378.96,
      "duration": 3.12
    },
    {
      "lang": "en",
      "text": "But\n I did that as well, but then I",
      "offset": 380.24,
      "duration": 3.28
    },
    {
      "lang": "en",
      "text": "thought for some reason I was trying to",
      "offset": 382.08,
      "duration": 4.559
    },
    {
      "lang": "en",
      "text": "debug it, so I put it put it wherever.",
      "offset": 383.52,
      "duration": 4.56
    },
    {
      "lang": "en",
      "text": "All right, let's do another one.\n Yeah,",
      "offset": 386.639,
      "duration": 3.12
    },
    {
      "lang": "en",
      "text": "we got time for one more. Quick as",
      "offset": 388.08,
      "duration": 3.36
    },
    {
      "lang": "en",
      "text": "possible.\n All right, so we're going for",
      "offset": 389.759,
      "duration": 3.921
    },
    {
      "lang": "en",
      "text": "fastest.\n Fastest. The moment you're",
      "offset": 391.44,
      "duration": 4.8
    },
    {
      "lang": "en",
      "text": "done, just submit.\n Okay. All right, here",
      "offset": 393.68,
      "duration": 5.2
    },
    {
      "lang": "en",
      "text": "we go.\n All right, clash. Now, let's do",
      "offset": 396.24,
      "duration": 7.2
    },
    {
      "lang": "en",
      "text": "this. Uh, input two, hello. Expected,",
      "offset": 398.88,
      "duration": 7.599
    },
    {
      "lang": "en",
      "text": "hello, hello. Input seven, blah. Output",
      "offset": 403.44,
      "duration": 6.319
    },
    {
      "lang": "en",
      "text": "blah blah blah. Uh, we have n",
      "offset": 406.479,
      "duration": 5.121
    },
    {
      "lang": "en",
      "text": "uh four",
      "offset": 409.759,
      "duration": 5.761
    },
    {
      "lang": "en",
      "text": "i equals uh zero. Oh my dear god, why do",
      "offset": 411.6,
      "duration": 5.52
    },
    {
      "lang": "en",
      "text": "I reach for a for loop in this? I could",
      "offset": 415.52,
      "duration": 3.44
    },
    {
      "lang": "en",
      "text": "have reached for anything else. Well, I",
      "offset": 417.12,
      "duration": 6.799
    },
    {
      "lang": "en",
      "text": "is less than N or equal to N and then I",
      "offset": 418.96,
      "duration": 8.959
    },
    {
      "lang": "en",
      "text": "++. We're going to print",
      "offset": 423.919,
      "duration": 6.641
    },
    {
      "lang": "en",
      "text": "um uh I guess I just need an array.",
      "offset": 427.919,
      "duration": 3.761
    },
    {
      "lang": "en",
      "text": "We'll use the same trick as the last",
      "offset": 430.56,
      "duration": 3.12
    },
    {
      "lang": "en",
      "text": "one. So, I'll just do a new array. The",
      "offset": 431.68,
      "duration": 4.799
    },
    {
      "lang": "en",
      "text": "length of the array needs to be in. And",
      "offset": 433.68,
      "duration": 5.76
    },
    {
      "lang": "en",
      "text": "then for each element, we literally just",
      "offset": 436.479,
      "duration": 6.081
    },
    {
      "lang": "en",
      "text": "need the word itself. So basically you",
      "offset": 439.44,
      "duration": 7.36
    },
    {
      "lang": "en",
      "text": "take the first line and the second line",
      "offset": 442.56,
      "duration": 7.359
    },
    {
      "lang": "en",
      "text": "and you repeat it however many times",
      "offset": 446.8,
      "duration": 7.519
    },
    {
      "lang": "en",
      "text": "that you want. So um console.log",
      "offset": 449.919,
      "duration": 7.361
    },
    {
      "lang": "en",
      "text": "array from",
      "offset": 454.319,
      "duration": 10.88
    },
    {
      "lang": "en",
      "text": "length of w and we will map return n and",
      "offset": 457.28,
      "duration": 10.4
    },
    {
      "lang": "en",
      "text": "then we'll join that all together with a",
      "offset": 465.199,
      "duration": 5.521
    },
    {
      "lang": "en",
      "text": "new line and print this out. That should",
      "offset": 467.68,
      "duration": 6.2
    },
    {
      "lang": "en",
      "text": "do it.",
      "offset": 470.72,
      "duration": 3.16
    },
    {
      "lang": "en",
      "text": "Yes. Done. Oh my god. Print. Uh,",
      "offset": 474.4,
      "duration": 8.16
    },
    {
      "lang": "en",
      "text": "expected nothing. Found hello. Expected",
      "offset": 479.599,
      "duration": 6.081
    },
    {
      "lang": "en",
      "text": "nothing.\n Expected hello. Oh. Um,\n CJ,",
      "offset": 482.56,
      "duration": 5.919
    },
    {
      "lang": "en",
      "text": "they already penned.\n What is going on",
      "offset": 485.68,
      "duration": 6.32
    },
    {
      "lang": "en",
      "text": "here? No.JS version.\n Oh, I did it like",
      "offset": 488.479,
      "duration": 6.521
    },
    {
      "lang": "en",
      "text": "this.",
      "offset": 492,
      "duration": 3
    },
    {
      "lang": "en",
      "text": "Ah,",
      "offset": 495.199,
      "duration": 5.761
    },
    {
      "lang": "en",
      "text": "I got second. Whoa. Nice, Scott. Great",
      "offset": 497.199,
      "duration": 6
    },
    {
      "lang": "en",
      "text": "work.\n Now I got to debug. I thought I",
      "offset": 500.96,
      "duration": 4.56
    },
    {
      "lang": "en",
      "text": "had this.",
      "offset": 503.199,
      "duration": 4.641
    },
    {
      "lang": "en",
      "text": "W is not defi. Why in the hell is there",
      "offset": 505.52,
      "duration": 4.64
    },
    {
      "lang": "en",
      "text": "capitals for their variables? I did this",
      "offset": 507.84,
      "duration": 5.28
    },
    {
      "lang": "en",
      "text": "last time. length W. Oh, cuz this has to",
      "offset": 510.16,
      "duration": 6.879
    },
    {
      "lang": "en",
      "text": "be a console.",
      "offset": 513.12,
      "duration": 5.919
    },
    {
      "lang": "en",
      "text": "I think I have to parse that, right?\n You",
      "offset": 517.039,
      "duration": 4.24
    },
    {
      "lang": "en",
      "text": "don't want to parse it.\n Oh, I got them",
      "offset": 519.039,
      "duration": 4.56
    },
    {
      "lang": "en",
      "text": "backwards. N.\n That's the hardest part of",
      "offset": 521.279,
      "duration": 3.601
    },
    {
      "lang": "en",
      "text": "these is like figuring out what the",
      "offset": 523.599,
      "duration": 5.761
    },
    {
      "lang": "en",
      "text": "variables even are.\n Come on. Come on. N",
      "offset": 524.88,
      "duration": 7.2
    },
    {
      "lang": "en",
      "text": "is the length. W is the actual",
      "offset": 529.36,
      "duration": 5.76
    },
    {
      "lang": "en",
      "text": "character. Play all test cases. Boom.",
      "offset": 532.08,
      "duration": 6.04
    },
    {
      "lang": "en",
      "text": "Submit.",
      "offset": 535.12,
      "duration": 3
    },
    {
      "lang": "en",
      "text": "Wes. You know it's bad when I beat you",
      "offset": 538.399,
      "duration": 4.481
    },
    {
      "lang": "en",
      "text": "by a minute.",
      "offset": 540.399,
      "duration": 5.281
    },
    {
      "lang": "en",
      "text": "Goofed it up. All right. Me first.\n Same",
      "offset": 542.88,
      "duration": 4.399
    },
    {
      "lang": "en",
      "text": "as the last one. Create an array and",
      "offset": 545.68,
      "duration": 4.159
    },
    {
      "lang": "en",
      "text": "then from each of those array return the",
      "offset": 547.279,
      "duration": 4.56
    },
    {
      "lang": "en",
      "text": "value that was provided and then just",
      "offset": 549.839,
      "duration": 4.321
    },
    {
      "lang": "en",
      "text": "join them with a new line character.",
      "offset": 551.839,
      "duration": 4.081
    },
    {
      "lang": "en",
      "text": "That's too much work. Well, Scott, if",
      "offset": 554.16,
      "duration": 3.28
    },
    {
      "lang": "en",
      "text": "you look at his solution, I don't know",
      "offset": 555.92,
      "duration": 4.16
    },
    {
      "lang": "en",
      "text": "if you know this, but if you do console.",
      "offset": 557.44,
      "duration": 4.8
    },
    {
      "lang": "en",
      "text": "That lets you debug without affecting",
      "offset": 560.08,
      "duration": 4.96
    },
    {
      "lang": "en",
      "text": "the output.\n So, I don't know that. No.",
      "offset": 562.24,
      "duration": 4.08
    },
    {
      "lang": "en",
      "text": "Yeah. Yeah. So, that's a good trick if",
      "offset": 565.04,
      "duration": 2.32
    },
    {
      "lang": "en",
      "text": "you want to see like what something is,",
      "offset": 566.32,
      "duration": 2.079
    },
    {
      "lang": "en",
      "text": "but you don't want to mess with what",
      "offset": 567.36,
      "duration": 3.039
    },
    {
      "lang": "en",
      "text": "your output is. Yeah.\n I did a similar",
      "offset": 568.399,
      "duration": 5.12
    },
    {
      "lang": "en",
      "text": "thing. I did a simple for loop. Uh my",
      "offset": 570.399,
      "duration": 5.681
    },
    {
      "lang": "en",
      "text": "first run head I is is less than or",
      "offset": 573.519,
      "duration": 4.641
    },
    {
      "lang": "en",
      "text": "equal to, which of course failed",
      "offset": 576.08,
      "duration": 4.319
    },
    {
      "lang": "en",
      "text": "immediately, and then I was like, ah,",
      "offset": 578.16,
      "duration": 4.239
    },
    {
      "lang": "en",
      "text": "okay. And then just frazzled by seeing",
      "offset": 580.399,
      "duration": 4.161
    },
    {
      "lang": "en",
      "text": "everybody else submit. But uh yeah,",
      "offset": 582.399,
      "duration": 4.241
    },
    {
      "lang": "en",
      "text": "pretty simple.\n Nice. Yeah, my solution",
      "offset": 584.56,
      "duration": 4.08
    },
    {
      "lang": "en",
      "text": "is same same as Wes's. We're on the same",
      "offset": 586.64,
      "duration": 4.56
    },
    {
      "lang": "en",
      "text": "wavelength here.\n Beauty.\n Yeah.\n You guys",
      "offset": 588.64,
      "duration": 4.639
    },
    {
      "lang": "en",
      "text": "are both I feel like the for loop is",
      "offset": 591.2,
      "duration": 4.319
    },
    {
      "lang": "en",
      "text": "easier here. But\n I I do love a for loop,",
      "offset": 593.279,
      "duration": 6.481
    },
    {
      "lang": "en",
      "text": "but not the like I I plus+ 91 semicolons",
      "offset": 595.519,
      "duration": 5.601
    },
    {
      "lang": "en",
      "text": "everywhere.\n It's so easy. It's so easy",
      "offset": 599.76,
      "duration": 2.96
    },
    {
      "lang": "en",
      "text": "to mess up like the less than or the",
      "offset": 601.12,
      "duration": 4.32
    },
    {
      "lang": "en",
      "text": "greater than or like this is just like I",
      "offset": 602.72,
      "duration": 4.559
    },
    {
      "lang": "en",
      "text": "need this many numbers. Array from has",
      "offset": 605.44,
      "duration": 3.519
    },
    {
      "lang": "en",
      "text": "it for you.\n Mhm. Yeah. I think you can",
      "offset": 607.279,
      "duration": 3.68
    },
    {
      "lang": "en",
      "text": "also do array and just pass it a",
      "offset": 608.959,
      "duration": 3.921
    },
    {
      "lang": "en",
      "text": "straight up number. Um, but then you",
      "offset": 610.959,
      "duration": 4
    },
    {
      "lang": "en",
      "text": "have to tag a",
      "offset": 612.88,
      "duration": 4.079
    },
    {
      "lang": "en",
      "text": "fill.\n No, then you have to fill them.",
      "offset": 614.959,
      "duration": 4.081
    },
    {
      "lang": "en",
      "text": "Yeah.\n And then you have to map them cuz",
      "offset": 616.959,
      "duration": 5.12
    },
    {
      "lang": "en",
      "text": "you cannot map over empty array slots,",
      "offset": 619.04,
      "duration": 4.96
    },
    {
      "lang": "en",
      "text": "which is why array from is so nice",
      "offset": 622.079,
      "duration": 4.561
    },
    {
      "lang": "en",
      "text": "because\n you can map them as you create",
      "offset": 624,
      "duration": 5.2
    },
    {
      "lang": "en",
      "text": "them.\n That's why the for loop very",
      "offset": 626.64,
      "duration": 4.08
    },
    {
      "lang": "en",
      "text": "simple",
      "offset": 629.2,
      "duration": 4.24
    },
    {
      "lang": "en",
      "text": "guys are like joining and\n arrays. You're",
      "offset": 630.72,
      "duration": 5.84
    },
    {
      "lang": "en",
      "text": "not getting arrays with that uh with for",
      "offset": 633.44,
      "duration": 5.04
    },
    {
      "lang": "en",
      "text": "those for loops. Scott,\n the answer did",
      "offset": 636.56,
      "duration": 5.839
    },
    {
      "lang": "en",
      "text": "not request an array. just requested",
      "offset": 638.48,
      "duration": 5.76
    },
    {
      "lang": "en",
      "text": "a bunch of strings. I'll put on new",
      "offset": 642.399,
      "duration": 3.12
    },
    {
      "lang": "en",
      "text": "lines.\n All right, thank you so much for",
      "offset": 644.24,
      "duration": 2.96
    },
    {
      "lang": "en",
      "text": "watching. This was super fun. Uh",
      "offset": 645.519,
      "duration": 3.281
    },
    {
      "lang": "en",
      "text": "definitely give these a try and let us",
      "offset": 647.2,
      "duration": 3.44
    },
    {
      "lang": "en",
      "text": "know how you did. Uh if you enjoyed",
      "offset": 648.8,
      "duration": 3.52
    },
    {
      "lang": "en",
      "text": "this, you'll enjoy these videos as well.",
      "offset": 650.64,
      "duration": 4.8
    },
    {
      "lang": "en",
      "text": "So, we'll see you in the next one.",
      "offset": 652.32,
      "duration": 3.12
    }
  ],
  "cleanText": "Welcome to another Clash of Code. In this video, all three of us are going to compete to solve these JavaScript problems, but with a twist. Today is Reverse Mode. So, there will be no problem description. All we'll see are inputs and outputs, and we have to figure out what code to write to get that output given those inputs. Is everyone ready?\nOh, I'm ready.\nAll right, I'm ready. Nice. Let's do it.\nThis game in Reverse Mode, expected input, expected output. You input one, you get 1 through 10. And then this input gives us 21 and it's 21 42 63 84. So it's increasing by 21 each time. I think that's what we need to do. And then we do it 10 times. So take the number, repeat it 10 times, multiply and add it to itself that many times. So I guess it would be multiplied. So what if I did an array from and then we give it a length of 10 and then for each element we take i + 1 which is going to be 1 2 3 4 5 6 7 8 9 10 and multiply it times the input 7 8 9 there's always 10. Okay, so we basically take in n console error is how you take what n is. n is one. Okay, so we want to make a new array of 10 items.\nSo array from with a length of 10. Then we are going to have a map. So we don't care about the first item because it's empty and then we want the index from that we will return the index times n. So we can do a four i equals 0 i is less than 10 and then i should be less than or equal to 10. Oh no I is zero. Um, let's start i at one cuz we're just multiplying it by Yeah, we're i should be one. Okay, we'll log this all out by joining it together on a space. I think I think that should do it if I didn't do anything crazy. Let's try it. Yes. No. Okay. Oh, I see. I need to do i + 1 times n in parenthesis order of operation counts. Yes. Okay, this is it. Sick.\nConsole dot const answer is equal to console log answer.\n[Laughter]\nStandard output stream nojs version 20. What the hell did I do? N is not defined. Why? Oh, it's a capital who is a capital N. That's stupid. I guess I do want to take this and turn it into a variable here. So, a equals print a * i and then um no, I don't want to submit my code. I want to play out test cases. Um, found nothing. We basically are off by one. So, i + 1 * n. Okay. And then we simply join with a space.\nGood. Play all test cases.\nUhoh. Okay. So clearly I'm doing something stupid. So var a parse int for i.\nOh, it's always going to be that. So we don't want it to go once. We want it to go 10 times.\nI'm getting 21. So, I basically want to return times i want. That's what I did.\nSuccess.\nSubmit. Got it. Damn, CJ. A minute and a bit. Yeah,\nthis is stupid. It's expecting to have them all as like a um string maybe. I don't know why it's like asking to concatenate them all or something.\nI really wanted to do some like short, but I wasn't trying to make it as short as possible. Right. It's kind of nice. be just like doing it as fast as possible.\nJust solve it. What? Whatever it takes.\nYeah. Um\nOh, because it's plus a print statement. Folks, you'll have to forgive me. I'm simultaneously trying to solve the problem and optimize as I go, which like is not my thing. That's the read line business. Where am I using a\nDid he get it though?\nWill that work?\nYeah, he's done. He just doesn't He just needs to\nOkay, perfect.\nScott. Scott, what? But we had a time limit.\nNo, no, just submit.\nYeah, you don't need to shorten it.\nDid you Did you get it?\nNo, I thought it was I thought it was shortest.\nNo, no, no. Just submit when you're done. When you're ready.\nI thought it was shortest and fastest.\nI was going for shortest.\nIt's only uh\nI could have got I got that way faster. I was just going for shortest. A\nYeah, that's okay.\nI was optimizing it. All right, I'll share my code first. All right, share my code. Uh, you can look at my code. But it might not even be the shortest, but it is short cuz I was trying to get it very short. I just Yeah, I read the line. I made an array. I pushed it and then I joined it.\nNice. You started your for loop at one up to 11. But I guess that makes sense cuz then you didn't have to do i + 1.\nOh, that's the move.\nYeah.\nNone of the none of the rest is the move though.\nWell, I was going for shortest.\nYeah, that's true.\nYeah.\nOkay.\nMine. All right.\nIt is exactly the same as what I did. So, uh,\nmake an array.\nArray from Yeah.\nis a good trick.\nAnd then you the underscore is throws out the first argument because when you are mapping over an array with nothing in it, you have to get to the index value. So you use underscore just to kind of throw it away. Uh, and then you return i. I had it way faster, but I forgot about my parenthesis and it was goofing up. It was adding the one first.\nYeah.\nHow was How did I miss that? It was supposed to be fastest. I'm so confused.\njust re-watch the intro and I don't I don't know. But uh, yeah, I solved it the same way and I had the exact same problem as Wes. I just basically condensed his run in half. I also did number times n instead of n times number. That's like the only difference. But\nI did that as well, but then I thought for some reason I was trying to debug it, so I put it put it wherever. All right, let's do another one.\nYeah, we got time for one more. Quick as possible.\nAll right, so we're going for fastest.\nFastest. The moment you're done, just submit.\nOkay. All right, here we go.\nAll right, clash. Now, let's do this. Uh, input two, hello. Expected, hello, hello. Input seven, blah. Output blah blah blah. Uh, we have n uh four i equals uh zero. Oh my dear god, why do I reach for a for loop in this? I could have reached for anything else. Well, i is less than n or equal to n and then i++. We're going to print um uh I guess I just need an array. We'll use the same trick as the last one. So, I'll just do a new array. The length of the array needs to be n. And then for each element, we literally just need the word itself. So basically you take the first line and the second line and you repeat it however many times that you want. So um console.log array from length of w and we will map return n and then we'll join that all together with a new line and print this out. That should do it.\nYes. Done. Oh my god. Print. Uh, expected nothing. Found hello. Expected nothing.\nExpected hello. Oh. Um, CJ,\nthey already penned.\nWhat is going on here? No.JS version.\nOh, I did it like this.\nAh,\nI got second. Whoa. Nice, Scott. Great work.\nNow I got to debug. I thought I had this.\nW is not defi. Why in the hell is there capitals for their variables? I did this last time. length W. Oh, cuz this has to be a console.\nI think I have to parse that, right?\nYou don't want to parse it.\nOh, I got them backwards. N.\nThat's the hardest part of these is like figuring out what the variables even are.\nCome on. Come on. N is the length. W is the actual character. Play all test cases. Boom.\nSubmit.\nWes. You know it's bad when I beat you by a minute.\nGoofed it up. All right. Me first.\nSame as the last one. Create an array and then from each of those array return the value that was provided and then just join them with a new line character.\nThat's too much work. Well, Scott, if you look at his solution, I don't know if you know this, but if you do console. That lets you debug without affecting the output.\nSo, I don't know that. No.\nYeah. Yeah. So, that's a good trick if you want to see like what something is, but you don't want to mess with what your output is. Yeah.\nI did a similar thing. I did a simple for loop. Uh my first run head i is is less than or equal to, which of course failed immediately, and then I was like, ah, okay. And then just frazzled by seeing everybody else submit. But uh, yeah, pretty simple.\nNice. Yeah, my solution is same same as Wes's. We're on the same wavelength here.\nBeauty.\nYeah.\nYou guys are both I feel like the for loop is easier here. But\nI I do love a for loop, but not the like I i++ 91 semicolons everywhere.\nIt's so easy. It's so easy to mess up like the less than or the greater than or like this is just like I need this many numbers. Array from has it for you.\nMhm. Yeah. I think you can also do array and just pass it a straight up number. Um, but then you have to tag a\nfill.\nNo, then you have to fill them.\nYeah.\nAnd then you have to map them cuz you cannot map over empty array slots, which is why array from is so nice because\nyou can map them as you create them.\nThat's why the for loop very simple\nguys are like joining and arrays. You're not getting arrays with that uh with for those for loops. Scott,\nthe answer did not request an array. just requested a bunch of strings. I'll put on new lines.\nAll right, thank you so much for watching. This was super fun. Uh definitely give these a try and let us know how you did. Uh if you enjoyed this, you'll enjoy these videos as well. So, we'll see you in the next one.",
  "dumpedAt": "2025-07-21T18:43:25.402Z"
}